
boulesTimer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000474  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000608  08000608  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000608  08000608  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000608  08000608  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000608  08000608  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000610  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000d06  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000385  00000000  00000000  00020d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f8  00000000  00000000  00021108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000ab  00000000  00000000  00021200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014d52  00000000  00000000  000212ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000c87  00000000  00000000  00035ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000727d6  00000000  00000000  00036c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000030c  00000000  00000000  000a945c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  000a9768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005f0 	.word	0x080005f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080005f0 	.word	0x080005f0

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <timer_set>:

// Global variable
volatile uint8_t led_pattern_flag = 1;

// Moved functions
void timer_set(uint16_t delay_in_milliseconds){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	80fb      	strh	r3, [r7, #6]
    timer_info timer_x_info = delay_set(delay_in_milliseconds);
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f80b 	bl	800028c <delay_set>
 8000276:	4603      	mov	r3, r0
 8000278:	60fb      	str	r3, [r7, #12]
    timer_initialisation(&timer_x_info);
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f925 	bl	80004ce <timer_initialisation>
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <delay_set>:

timer_info delay_set(uint16_t delay_in_milliseconds){
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	80fb      	strh	r3, [r7, #6]
    timer_info timer_x_info;
    uint16_t psc_value = 0x1F3F;
 8000296:	f641 733f 	movw	r3, #7999	; 0x1f3f
 800029a:	82fb      	strh	r3, [r7, #22]
    set_max_count(&timer_x_info, delay_in_milliseconds);
 800029c:	88fa      	ldrh	r2, [r7, #6]
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	4611      	mov	r1, r2
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f814 	bl	80002d2 <set_max_count>
    set_psc_value(&timer_x_info, psc_value);
 80002aa:	8afa      	ldrh	r2, [r7, #22]
 80002ac:	f107 030c 	add.w	r3, r7, #12
 80002b0:	4611      	mov	r1, r2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f81c 	bl	80002f0 <set_psc_value>
    return timer_x_info;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	2300      	movs	r3, #0
 80002be:	8a3a      	ldrh	r2, [r7, #16]
 80002c0:	f362 030f 	bfi	r3, r2, #0, #16
 80002c4:	8a7a      	ldrh	r2, [r7, #18]
 80002c6:	f362 431f 	bfi	r3, r2, #16, #16
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <set_max_count>:

void set_max_count(timer_info *s, uint16_t max_count_value){
 80002d2:	b480      	push	{r7}
 80002d4:	b083      	sub	sp, #12
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	460b      	mov	r3, r1
 80002dc:	807b      	strh	r3, [r7, #2]
    s->max_count = max_count_value;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	887a      	ldrh	r2, [r7, #2]
 80002e2:	801a      	strh	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <set_psc_value>:

void set_psc_value(timer_info *s, uint16_t psc_int){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	807b      	strh	r3, [r7, #2]
    s->psc_value = psc_int;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	887a      	ldrh	r2, [r7, #2]
 8000300:	805a      	strh	r2, [r3, #2]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <LED_on>:

void LED_on(){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
    uint8_t *LED_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <LED_on+0x20>)
 8000318:	607b      	str	r3, [r7, #4]
    uint8_t LED_pattern = 0xFF;
 800031a:	23ff      	movs	r3, #255	; 0xff
 800031c:	70fb      	strb	r3, [r7, #3]
    *LED_output_register = LED_pattern;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	701a      	strb	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	48001015 	.word	0x48001015

08000334 <chase_led>:

void chase_led() {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
    uint8_t *LED_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800033a:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <chase_led+0x74>)
 800033c:	607b      	str	r3, [r7, #4]

    if (*LED_output_register == 0b11111111) {
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2bff      	cmp	r3, #255	; 0xff
 8000344:	d102      	bne.n	800034c <chase_led+0x18>
        led_pattern_flag = 0; // Start turning LEDs off
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <chase_led+0x78>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
    }

    if (led_pattern_flag == 0) {
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <chase_led+0x78>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	2b00      	cmp	r3, #0
 8000354:	d114      	bne.n	8000380 <chase_led+0x4c>
        uint8_t LED_right_shift = *LED_output_register >> 1;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	085b      	lsrs	r3, r3, #1
 800035c:	70fb      	strb	r3, [r7, #3]
        *LED_output_register = LED_right_shift;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	78fa      	ldrb	r2, [r7, #3]
 8000362:	701a      	strb	r2, [r3, #0]
        // Check if all LEDs are off and if so, set the final pattern
        if (*LED_output_register == 0x00) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d119      	bne.n	80003a0 <chase_led+0x6c>
        	timer_set(0x64);
 800036c:	2064      	movs	r0, #100	; 0x64
 800036e:	f7ff ff79 	bl	8000264 <timer_set>
            led_pattern_flag = 2; // Use a new state to indicate flashing pattern
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <chase_led+0x78>)
 8000374:	2202      	movs	r2, #2
 8000376:	701a      	strb	r2, [r3, #0]
            *LED_output_register = 0x55; // Set the initial pattern to 0x01010101 (0b01010101)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2255      	movs	r2, #85	; 0x55
 800037c:	701a      	strb	r2, [r3, #0]
            *LED_output_register = 0xAA; // Change to 0x10101010 (0b10101010)
        } else {
            *LED_output_register = 0x55; // Change back to 0x01010101 (0b01010101)
        }
    }
}
 800037e:	e00f      	b.n	80003a0 <chase_led+0x6c>
    } else if (led_pattern_flag == 2) {
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <chase_led+0x78>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b02      	cmp	r3, #2
 8000388:	d10a      	bne.n	80003a0 <chase_led+0x6c>
        if (*LED_output_register == 0x55) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b55      	cmp	r3, #85	; 0x55
 8000390:	d103      	bne.n	800039a <chase_led+0x66>
            *LED_output_register = 0xAA; // Change to 0x10101010 (0b10101010)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	22aa      	movs	r2, #170	; 0xaa
 8000396:	701a      	strb	r2, [r3, #0]
}
 8000398:	e002      	b.n	80003a0 <chase_led+0x6c>
            *LED_output_register = 0x55; // Change back to 0x01010101 (0b01010101)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2255      	movs	r2, #85	; 0x55
 800039e:	701a      	strb	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	48001015 	.word	0x48001015
 80003ac:	20000000 	.word	0x20000000

080003b0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    if (timer_overflow != 0x00) {
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <TIM2_IRQHandler+0x1c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <TIM2_IRQHandler+0x12>
        timer_overflow();
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <TIM2_IRQHandler+0x1c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4798      	blx	r3
    }
    reset_UIF();
 80003c2:	f000 f83c 	bl	800043e <reset_UIF>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000020 	.word	0x20000020

080003d0 <enable_clocks>:

int enable_clocks(){
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN; //enable GPIOA, GPIOC, GPIOE
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <enable_clocks+0x28>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <enable_clocks+0x28>)
 80003da:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80003de:	6153      	str	r3, [r2, #20]

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; //store a 1 into the TIM2 enable flag to enable the timer
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <enable_clocks+0x28>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <enable_clocks+0x28>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	61d3      	str	r3, [r2, #28]
}
 80003ec:	bf00      	nop
 80003ee:	4618      	mov	r0, r3
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000

080003fc <initialise_board>:

void initialise_board() {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <initialise_board+0x20>)
 8000404:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f245 5255 	movw	r2, #21845	; 0x5555
 800040c:	801a      	strh	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	48001002 	.word	0x48001002

08000420 <reset_timer>:


void reset_timer() {
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

	TIM2->EGR |= TIM_EGR_UG;
 8000424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6153      	str	r3, [r2, #20]

}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <reset_UIF>:

void reset_UIF(){
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

	TIM2->SR &= ~TIM_SR_UIF;
 8000442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044c:	f023 0301 	bic.w	r3, r3, #1
 8000450:	6113      	str	r3, [r2, #16]

}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <max_count_value>:

void max_count_value(timer_info *s) {
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

	uint16_t max_count = s->max_count;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	81fb      	strh	r3, [r7, #14]
	TIM2->ARR = max_count;
 800046a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046e:	89fb      	ldrh	r3, [r7, #14]
 8000470:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <start_timer>:

void start_timer() {
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

	TIM2->CR1 |= TIM_CR1_CEN;
 8000482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6013      	str	r3, [r2, #0]

}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <set_prescaler>:

void set_prescaler(timer_info *s){
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

	uint16_t psc_value = s->psc_value;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	885b      	ldrh	r3, [r3, #2]
 80004a8:	81fb      	strh	r3, [r7, #14]
	TIM2->PSC = psc_value;
 80004aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ae:	89fb      	ldrh	r3, [r7, #14]
 80004b0:	6293      	str	r3, [r2, #40]	; 0x28

}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <general_initialisation>:

void general_initialisation() {
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0

	enable_clocks();
 80004c2:	f7ff ff85 	bl	80003d0 <enable_clocks>
	initialise_board();
 80004c6:	f7ff ff99 	bl	80003fc <initialise_board>

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <timer_initialisation>:

void timer_initialisation(timer_info *s){
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d6:	b672      	cpsid	i
}
 80004d8:	bf00      	nop

	__disable_irq();

	max_count_value(s);
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff ffbe 	bl	800045c <max_count_value>
	start_timer();
 80004e0:	f7ff ffcd 	bl	800047e <start_timer>
	set_prescaler(s);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ffd9 	bl	800049c <set_prescaler>
	reset_timer();
 80004ea:	f7ff ff99 	bl	8000420 <reset_timer>
	reset_UIF();
 80004ee:	f7ff ffa6 	bl	800043e <reset_UIF>
  __ASM volatile ("cpsie i" : : : "memory");
 80004f2:	b662      	cpsie	i
}
 80004f4:	bf00      	nop

	__enable_irq();

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <enable_interrupt>:

void enable_interrupt(){
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000502:	b672      	cpsid	i
}
 8000504:	bf00      	nop

	__disable_irq();

	__NVIC_SetPriority(TIM2_IRQn,2);
 8000506:	2102      	movs	r1, #2
 8000508:	201c      	movs	r0, #28
 800050a:	f7ff fe81 	bl	8000210 <__NVIC_SetPriority>
	__NVIC_EnableIRQ(TIM2_IRQn);
 800050e:	201c      	movs	r0, #28
 8000510:	f7ff fe60 	bl	80001d4 <__NVIC_EnableIRQ>

	TIM2->DIER |= TIM_DIER_UIE;
 8000514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000524:	b662      	cpsie	i
}
 8000526:	bf00      	nop

	__enable_irq();
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <main>:
#include "math.h"
#include "ptu_definitions.h"
#include "ptu_i2c.h"
#include "serial.h"
#include "main.h"

 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
//I2C_HandleTypeDef hi2c1;
 8000530:	f7ff ffc5 	bl	80004be <general_initialisation>
//
 8000534:	f7ff feec 	bl	8000310 <LED_on>
//SPI_HandleTypeDef hspi1;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <main+0x20>)
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <main+0x24>)
 800053c:	601a      	str	r2, [r3, #0]
//
 800053e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000542:	f7ff fe8f 	bl	8000264 <timer_set>
//TIM_HandleTypeDef htim1;
//TIM_HandleTypeDef htim2;
 8000546:	f7ff ffda 	bl	80004fe <enable_interrupt>
//
//PCD_HandleTypeDef hpcd_USB_FS;
//
 800054a:	e7fe      	b.n	800054a <main+0x1e>
 800054c:	20000020 	.word	0x20000020
 8000550:	08000335 	.word	0x08000335

08000554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	; (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	; (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000582:	f000 f811 	bl	80005a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff ffd1 	bl	800052c <main>

0800058a <LoopForever>:

LoopForever:
  b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   r0, =_estack
 800058c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000598:	08000610 	.word	0x08000610
  ldr r2, =_sbss
 800059c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005a0:	20000024 	.word	0x20000024

080005a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_2_IRQHandler>
	...

080005a8 <__libc_init_array>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	4d0d      	ldr	r5, [pc, #52]	; (80005e0 <__libc_init_array+0x38>)
 80005ac:	4c0d      	ldr	r4, [pc, #52]	; (80005e4 <__libc_init_array+0x3c>)
 80005ae:	1b64      	subs	r4, r4, r5
 80005b0:	10a4      	asrs	r4, r4, #2
 80005b2:	2600      	movs	r6, #0
 80005b4:	42a6      	cmp	r6, r4
 80005b6:	d109      	bne.n	80005cc <__libc_init_array+0x24>
 80005b8:	4d0b      	ldr	r5, [pc, #44]	; (80005e8 <__libc_init_array+0x40>)
 80005ba:	4c0c      	ldr	r4, [pc, #48]	; (80005ec <__libc_init_array+0x44>)
 80005bc:	f000 f818 	bl	80005f0 <_init>
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	10a4      	asrs	r4, r4, #2
 80005c4:	2600      	movs	r6, #0
 80005c6:	42a6      	cmp	r6, r4
 80005c8:	d105      	bne.n	80005d6 <__libc_init_array+0x2e>
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
 80005cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d0:	4798      	blx	r3
 80005d2:	3601      	adds	r6, #1
 80005d4:	e7ee      	b.n	80005b4 <__libc_init_array+0xc>
 80005d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005da:	4798      	blx	r3
 80005dc:	3601      	adds	r6, #1
 80005de:	e7f2      	b.n	80005c6 <__libc_init_array+0x1e>
 80005e0:	08000608 	.word	0x08000608
 80005e4:	08000608 	.word	0x08000608
 80005e8:	08000608 	.word	0x08000608
 80005ec:	0800060c 	.word	0x0800060c

080005f0 <_init>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr

080005fc <_fini>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr
