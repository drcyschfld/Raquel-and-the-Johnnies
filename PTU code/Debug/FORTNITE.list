
FORTNITE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006348  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065ac  080065ac  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080065ac  080065ac  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065ac  080065ac  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080065b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          000005b8  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000658  20000658  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013b42  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cc5  00000000  00000000  00033c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  00036920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000de1  00000000  00000000  00037af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f09f  00000000  00000000  000388d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000167a9  00000000  00000000  00057978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9991  00000000  00000000  0006e121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005044  00000000  00000000  00127ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0012caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064c0 	.word	0x080064c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	080064c0 	.word	0x080064c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <enable_interrupt>:

void (*on_button_press)() = 0x00;

uint8_t ptu_on_state = 1;

void enable_interrupt() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
}
 8000306:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <enable_interrupt+0x48>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <enable_interrupt+0x48>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <enable_interrupt+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <enable_interrupt+0x50>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <enable_interrupt+0x50>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <enable_interrupt+0x50>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a09      	ldr	r2, [pc, #36]	; (8000350 <enable_interrupt+0x50>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 8000332:	2101      	movs	r1, #1
 8000334:	2006      	movs	r0, #6
 8000336:	f7ff ffb9 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 800033a:	2006      	movs	r0, #6
 800033c:	f7ff ff98 	bl	8000270 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000340:	b662      	cpsie	i
}
 8000342:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000
 8000350:	40010400 	.word	0x40010400

08000354 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <EXTI0_IRQHandler+0x24>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <EXTI0_IRQHandler+0x12>
		on_button_press();
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <EXTI0_IRQHandler+0x24>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4798      	blx	r3
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <EXTI0_IRQHandler+0x28>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a04      	ldr	r2, [pc, #16]	; (800037c <EXTI0_IRQHandler+0x28>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6153      	str	r3, [r2, #20]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000bc 	.word	0x200000bc
 800037c:	40010400 	.word	0x40010400

08000380 <button_init>:

void button_init(void(*fp)(void)) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	on_button_press = fp;
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <button_init+0x1c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	6013      	str	r3, [r2, #0]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	200000bc 	.word	0x200000bc

080003a0 <get_ptu_state>:

uint8_t get_ptu_state(){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	return ptu_on_state;
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <get_ptu_state+0x14>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000000 	.word	0x20000000

080003b8 <pause_ptu>:

void pause_ptu(){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	ptu_on_state = 0;
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <pause_ptu+0x18>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
	outcome(ball_distance);
 80003c2:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <pause_ptu+0x1c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f84a 	bl	8000460 <outcome>
	return;
 80003cc:	bf00      	nop
}
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000000 	.word	0x20000000
 80003d4:	200000c0 	.word	0x200000c0

080003d8 <pointcalc>:
#include "serial.h"
#include "string.h"
#include "stm32f303xc.h"

int pointcalc(uint32_t distance)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	int points = 1000;
 80003e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e4:	60fb      	str	r3, [r7, #12]
	if (distance < 20){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2b13      	cmp	r3, #19
 80003ea:	d803      	bhi.n	80003f4 <pointcalc+0x1c>
		points = 1000;
 80003ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	e02d      	b.n	8000450 <pointcalc+0x78>
	}
	else if (distance >= 20 && distance < 40) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b13      	cmp	r3, #19
 80003f8:	d906      	bls.n	8000408 <pointcalc+0x30>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b27      	cmp	r3, #39	; 0x27
 80003fe:	d803      	bhi.n	8000408 <pointcalc+0x30>
		points = 2000;
 8000400:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	e023      	b.n	8000450 <pointcalc+0x78>
	}
	else if (distance >= 40 && distance < 60) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b27      	cmp	r3, #39	; 0x27
 800040c:	d906      	bls.n	800041c <pointcalc+0x44>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b3b      	cmp	r3, #59	; 0x3b
 8000412:	d803      	bhi.n	800041c <pointcalc+0x44>
		points = 3000;
 8000414:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	e019      	b.n	8000450 <pointcalc+0x78>
	}
	else if (distance >= 60 && distance < 80) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b3b      	cmp	r3, #59	; 0x3b
 8000420:	d906      	bls.n	8000430 <pointcalc+0x58>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b4f      	cmp	r3, #79	; 0x4f
 8000426:	d803      	bhi.n	8000430 <pointcalc+0x58>
		points = 4000;
 8000428:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	e00f      	b.n	8000450 <pointcalc+0x78>
	}
	else if (distance >= 80 && distance < 100) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b4f      	cmp	r3, #79	; 0x4f
 8000434:	d906      	bls.n	8000444 <pointcalc+0x6c>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b63      	cmp	r3, #99	; 0x63
 800043a:	d803      	bhi.n	8000444 <pointcalc+0x6c>
		points = 5000;
 800043c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e005      	b.n	8000450 <pointcalc+0x78>
	}
	else if (distance >= 100) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b63      	cmp	r3, #99	; 0x63
 8000448:	d902      	bls.n	8000450 <pointcalc+0x78>
		points = 1000;
 800044a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044e:	60fb      	str	r3, [r7, #12]
	}
	return points;
 8000450:	68fb      	ldr	r3, [r7, #12]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
	...

08000460 <outcome>:

void outcome(uint32_t length){
 8000460:	b580      	push	{r7, lr}
 8000462:	b09c      	sub	sp, #112	; 0x70
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	char stringbuffer[100];
	int pointswon = pointcalc(length);
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f7ff ffb5 	bl	80003d8 <pointcalc>
 800046e:	66f8      	str	r0, [r7, #108]	; 0x6c
	sprintf(stringbuffer, "Congratulations you made it %d centimeters, Winning %d points!\n", length, pointswon);
 8000470:	f107 0008 	add.w	r0, r7, #8
 8000474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	4906      	ldr	r1, [pc, #24]	; (8000494 <outcome+0x34>)
 800047a:	f005 fb7d 	bl	8005b78 <siprintf>
	SerialOutputString((uint8_t*)stringbuffer, &USART1_PORT);
 800047e:	f107 0308 	add.w	r3, r7, #8
 8000482:	4905      	ldr	r1, [pc, #20]	; (8000498 <outcome+0x38>)
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fd0a 	bl	8000e9e <SerialOutputString>
}
 800048a:	bf00      	nop
 800048c:	3770      	adds	r7, #112	; 0x70
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	080064d8 	.word	0x080064d8
 8000498:	20000004 	.word	0x20000004

0800049c <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <enable_clocks+0x1c>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <enable_clocks+0x1c>)
 80004a6:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80004aa:	6153      	str	r3, [r2, #20]
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <initialise_board+0x20>)
 80004c4:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f245 5255 	movw	r2, #21845	; 0x5555
 80004cc:	801a      	strh	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	48001002 	.word	0x48001002

080004e0 <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <HAL_TIM_IC_CaptureCallback+0x6c>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d127      	bne.n	8000542 <HAL_TIM_IC_CaptureCallback+0x62>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7f1b      	ldrb	r3, [r3, #28]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d123      	bne.n	8000542 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80004fa:	2100      	movs	r1, #0
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f004 fcb1 	bl	8004e64 <HAL_TIM_ReadCapturedValue>
 8000502:	4603      	mov	r3, r0
 8000504:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f001 fa45 	bl	800199c <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d103      	bne.n	8000520 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_TIM_IC_CaptureCallback+0x70>)
 800051a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800051c:	8013      	strh	r3, [r2, #0]
 800051e:	e006      	b.n	800052e <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	b29a      	uxth	r2, r3
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_TIM_IC_CaptureCallback+0x74>)
 800052c:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_TIM_IC_CaptureCallback+0x7c>)
 800053a:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <HAL_TIM_IC_CaptureCallback+0x78>)
 800053e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000540:	8013      	strh	r3, [r2, #0]
	}
}
 8000542:	bf00      	nop
 8000544:	3730      	adds	r7, #48	; 0x30
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40012c00 	.word	0x40012c00
 8000550:	20000504 	.word	0x20000504
 8000554:	20000506 	.word	0x20000506
 8000558:	20000500 	.word	0x20000500
 800055c:	20000502 	.word	0x20000502

08000560 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b09e      	sub	sp, #120	; 0x78
 8000564:	af04      	add	r7, sp, #16

	// look at the size difference between these structs,
	//  they are because the 32 bit microcontroller
	//  packs the data so the divisions are in groups
	//  of 4bytes (4bytes=32bit)
	uint8_t size_1 = sizeof(struct_1);
 8000566:	2314      	movs	r3, #20
 8000568:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint8_t size_2 = sizeof(struct_2);
 800056c:	230c      	movs	r3, #12
 800056e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62


	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000572:	4bba      	ldr	r3, [pc, #744]	; (800085c <main+0x2fc>)
 8000574:	f107 0410 	add.w	r4, r7, #16
 8000578:	461d      	mov	r5, r3
 800057a:	6828      	ldr	r0, [r5, #0]
 800057c:	6869      	ldr	r1, [r5, #4]
 800057e:	68aa      	ldr	r2, [r5, #8]
 8000580:	68eb      	ldr	r3, [r5, #12]
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	6928      	ldr	r0, [r5, #16]
 8000586:	6020      	str	r0, [r4, #0]
 8000588:	7d2b      	ldrb	r3, [r5, #20]
 800058a:	7123      	strb	r3, [r4, #4]
 800058c:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000590:	222b      	movs	r2, #43	; 0x2b
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f005 fb0f 	bl	8005bb8 <memset>

	enable_clocks();
 800059a:	f7ff ff7f 	bl	800049c <enable_clocks>
	initialise_board();
 800059e:	f7ff ff8d 	bl	80004bc <initialise_board>
	button_init(&pause_ptu);
 80005a2:	48af      	ldr	r0, [pc, #700]	; (8000860 <main+0x300>)
 80005a4:	f7ff feec 	bl	8000380 <button_init>
	enable_interrupt();
 80005a8:	f7ff feaa 	bl	8000300 <enable_interrupt>


	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80005ac:	4bad      	ldr	r3, [pc, #692]	; (8000864 <main+0x304>)
 80005ae:	65fb      	str	r3, [r7, #92]	; 0x5c

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80005b0:	2200      	movs	r2, #0
 80005b2:	49ad      	ldr	r1, [pc, #692]	; (8000868 <main+0x308>)
 80005b4:	2004      	movs	r0, #4
 80005b6:	f000 fbe5 	bl	8000d84 <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	volatile uint16_t vertical_PWM = 1800;
 80005c0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80005c4:	81fb      	strh	r3, [r7, #14]
	volatile uint16_t horizontal_PWM = 1400;
 80005c6:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80005ca:	81bb      	strh	r3, [r7, #12]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005cc:	f000 fed0 	bl	8001370 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d0:	f000 f9a6 	bl	8000920 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	//MX_GPIO_Init();
	MX_I2C1_Init();
 80005d4:	f000 fa08 	bl	80009e8 <MX_I2C1_Init>
	MX_SPI1_Init();
 80005d8:	f000 fa46 	bl	8000a68 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 80005dc:	f000 fb5e 	bl	8000c9c <MX_USB_PCD_Init>
	MX_TIM2_Init();
 80005e0:	f000 faf6 	bl	8000bd0 <MX_TIM2_Init>
	MX_TIM1_Init();
 80005e4:	f000 fa7e 	bl	8000ae4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	48a0      	ldr	r0, [pc, #640]	; (800086c <main+0x30c>)
 80005ec:	f003 fdfc 	bl	80041e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005f0:	2104      	movs	r1, #4
 80005f2:	489e      	ldr	r0, [pc, #632]	; (800086c <main+0x30c>)
 80005f4:	f003 fdf8 	bl	80041e8 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	489d      	ldr	r0, [pc, #628]	; (8000870 <main+0x310>)
 80005fc:	f003 ff56 	bl	80044ac <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000604:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 800060a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 800061a:	4896      	ldr	r0, [pc, #600]	; (8000874 <main+0x314>)
 800061c:	f000 fb65 	bl	8000cea <initialise_ptu_i2c>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 8000620:	2300      	movs	r3, #0
 8000622:	72fb      	strb	r3, [r7, #11]
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000624:	230a      	movs	r3, #10
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2301      	movs	r3, #1
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	f107 030b 	add.w	r3, r7, #11
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	2200      	movs	r2, #0
 8000636:	21c4      	movs	r1, #196	; 0xc4
 8000638:	488e      	ldr	r0, [pc, #568]	; (8000874 <main+0x314>)
 800063a:	f001 fa57 	bl	8001aec <HAL_I2C_Mem_Write>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	uint8_t PWM_direction_clockwise = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	// delay for initialisation of the lidar
	HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f000 fef6 	bl	800143c <HAL_Delay>

	while (get_ptu_state() != 0)
 8000650:	e153      	b.n	80008fa <main+0x39a>
	{

		if (PWM_direction_clockwise == 1) {
 8000652:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000656:	2b01      	cmp	r3, #1
 8000658:	d108      	bne.n	800066c <main+0x10c>
			vertical_PWM += 3;
 800065a:	89fb      	ldrh	r3, [r7, #14]
 800065c:	b29b      	uxth	r3, r3
 800065e:	3303      	adds	r3, #3
 8000660:	b29b      	uxth	r3, r3
 8000662:	81fb      	strh	r3, [r7, #14]
			horizontal_PWM += 0;
 8000664:	89bb      	ldrh	r3, [r7, #12]
 8000666:	b29b      	uxth	r3, r3
 8000668:	81bb      	strh	r3, [r7, #12]
 800066a:	e007      	b.n	800067c <main+0x11c>
		}
		else {
			vertical_PWM -= 3;
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	b29b      	uxth	r3, r3
 8000670:	3b03      	subs	r3, #3
 8000672:	b29b      	uxth	r3, r3
 8000674:	81fb      	strh	r3, [r7, #14]
			horizontal_PWM -= 0;
 8000676:	89bb      	ldrh	r3, [r7, #12]
 8000678:	b29b      	uxth	r3, r3
 800067a:	81bb      	strh	r3, [r7, #12]
		}

		if (vertical_PWM > 1700) {
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	b29b      	uxth	r3, r3
 8000680:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000684:	4293      	cmp	r3, r2
 8000686:	d905      	bls.n	8000694 <main+0x134>
			vertical_PWM = 1700;
 8000688:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800068c:	81fb      	strh	r3, [r7, #14]
			PWM_direction_clockwise = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}
		if (vertical_PWM < 900) {
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	b29b      	uxth	r3, r3
 8000698:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800069c:	d205      	bcs.n	80006aa <main+0x14a>
			vertical_PWM = 900;
 800069e:	f44f 7361 	mov.w	r3, #900	; 0x384
 80006a2:	81fb      	strh	r3, [r7, #14]
			PWM_direction_clockwise = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		TIM2->CCR1 = vertical_PWM;
 80006aa:	89fb      	ldrh	r3, [r7, #14]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = horizontal_PWM;
 80006b4:	89bb      	ldrh	r3, [r7, #12]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006bc:	639a      	str	r2, [r3, #56]	; 0x38


		uint8_t xMSB = 0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x29, 1, &xMSB, 1, 10);
 80006c2:	230a      	movs	r3, #10
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	f107 030a 	add.w	r3, r7, #10
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	2229      	movs	r2, #41	; 0x29
 80006d4:	21d3      	movs	r1, #211	; 0xd3
 80006d6:	4867      	ldr	r0, [pc, #412]	; (8000874 <main+0x314>)
 80006d8:	f001 fb1c 	bl	8001d14 <HAL_I2C_Mem_Read>
		uint8_t xLSB = 0x00;
 80006dc:	2300      	movs	r3, #0
 80006de:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x28, 1, &xLSB, 1, 10);
 80006e0:	230a      	movs	r3, #10
 80006e2:	9302      	str	r3, [sp, #8]
 80006e4:	2301      	movs	r3, #1
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	f107 0309 	add.w	r3, r7, #9
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	2228      	movs	r2, #40	; 0x28
 80006f2:	21d3      	movs	r1, #211	; 0xd3
 80006f4:	485f      	ldr	r0, [pc, #380]	; (8000874 <main+0x314>)
 80006f6:	f001 fb0d 	bl	8001d14 <HAL_I2C_Mem_Read>
		int16_t yaw_rate = ((xMSB << 8) | xLSB);
 80006fa:	7abb      	ldrb	r3, [r7, #10]
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	b21a      	sxth	r2, r3
 8000700:	7a7b      	ldrb	r3, [r7, #9]
 8000702:	b21b      	sxth	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

		uint8_t yMSB = 0x00;
 800070a:	2300      	movs	r3, #0
 800070c:	723b      	strb	r3, [r7, #8]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2B, 1, &yMSB, 1, 10);
 800070e:	230a      	movs	r3, #10
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	2301      	movs	r3, #1
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	222b      	movs	r2, #43	; 0x2b
 8000720:	21d3      	movs	r1, #211	; 0xd3
 8000722:	4854      	ldr	r0, [pc, #336]	; (8000874 <main+0x314>)
 8000724:	f001 faf6 	bl	8001d14 <HAL_I2C_Mem_Read>
		uint8_t yLSB = 0x00;
 8000728:	2300      	movs	r3, #0
 800072a:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2A, 1, &yLSB, 1, 10);
 800072c:	230a      	movs	r3, #10
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2301      	movs	r3, #1
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	222a      	movs	r2, #42	; 0x2a
 800073c:	21d3      	movs	r1, #211	; 0xd3
 800073e:	484d      	ldr	r0, [pc, #308]	; (8000874 <main+0x314>)
 8000740:	f001 fae8 	bl	8001d14 <HAL_I2C_Mem_Read>
		int16_t pitch_rate = ((yMSB << 8) | yLSB);
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	b21a      	sxth	r2, r3
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

		uint8_t zMSB = 0x00;
 8000754:	2300      	movs	r3, #0
 8000756:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2D, 1, &zMSB, 1, 10);
 8000758:	230a      	movs	r3, #10
 800075a:	9302      	str	r3, [sp, #8]
 800075c:	2301      	movs	r3, #1
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	1dbb      	adds	r3, r7, #6
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	222d      	movs	r2, #45	; 0x2d
 8000768:	21d3      	movs	r1, #211	; 0xd3
 800076a:	4842      	ldr	r0, [pc, #264]	; (8000874 <main+0x314>)
 800076c:	f001 fad2 	bl	8001d14 <HAL_I2C_Mem_Read>
		uint8_t zLSB = 0x00;
 8000770:	2300      	movs	r3, #0
 8000772:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2C, 1, &zLSB, 1, 10);
 8000774:	230a      	movs	r3, #10
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	1d7b      	adds	r3, r7, #5
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	222c      	movs	r2, #44	; 0x2c
 8000784:	21d3      	movs	r1, #211	; 0xd3
 8000786:	483b      	ldr	r0, [pc, #236]	; (8000874 <main+0x314>)
 8000788:	f001 fac4 	bl	8001d14 <HAL_I2C_Mem_Read>
		int16_t roll_rate = ((zMSB << 8) | zLSB);
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b21a      	sxth	r2, r3
 8000792:	797b      	ldrb	r3, [r7, #5]
 8000794:	b21b      	sxth	r3, r3
 8000796:	4313      	orrs	r3, r2
 8000798:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54


		uint8_t lidar_value = 0x03;
 800079c:	2303      	movs	r3, #3
 800079e:	713b      	strb	r3, [r7, #4]
		return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	2200      	movs	r2, #0
 80007b0:	21c4      	movs	r1, #196	; 0xc4
 80007b2:	4830      	ldr	r0, [pc, #192]	; (8000874 <main+0x314>)
 80007b4:	f001 f99a 	bl	8001aec <HAL_I2C_Mem_Write>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		lidar_value = 0xff;
 80007be:	23ff      	movs	r3, #255	; 0xff
 80007c0:	713b      	strb	r3, [r7, #4]

		uint8_t lidar_MSBa = 0x00;
 80007c2:	2300      	movs	r3, #0
 80007c4:	70fb      	strb	r3, [r7, #3]
		uint8_t lidar_LSBa = 0x00;
 80007c6:	2300      	movs	r3, #0
 80007c8:	70bb      	strb	r3, [r7, #2]

		volatile uint16_t lidar_distance = 0xff;
 80007ca:	23ff      	movs	r3, #255	; 0xff
 80007cc:	803b      	strh	r3, [r7, #0]

		uint16_t timeout;

		while ((lidar_value & 0x01) != 0x00) {
 80007ce:	e03e      	b.n	800084e <main+0x2ee>
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	9302      	str	r3, [sp, #8]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	2201      	movs	r2, #1
 80007e0:	21c5      	movs	r1, #197	; 0xc5
 80007e2:	4824      	ldr	r0, [pc, #144]	; (8000874 <main+0x314>)
 80007e4:	f001 fa96 	bl	8001d14 <HAL_I2C_Mem_Read>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 80007ee:	2364      	movs	r3, #100	; 0x64
 80007f0:	9302      	str	r3, [sp, #8]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	1cfb      	adds	r3, r7, #3
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	220f      	movs	r2, #15
 80007fe:	21c5      	movs	r1, #197	; 0xc5
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x314>)
 8000802:	f001 fa87 	bl	8001d14 <HAL_I2C_Mem_Read>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	1cbb      	adds	r3, r7, #2
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	2210      	movs	r2, #16
 800081c:	21c5      	movs	r1, #197	; 0xc5
 800081e:	4815      	ldr	r0, [pc, #84]	; (8000874 <main+0x314>)
 8000820:	f001 fa78 	bl	8001d14 <HAL_I2C_Mem_Read>
 8000824:	4603      	mov	r3, r0
 8000826:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

			lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b21a      	sxth	r2, r3
 8000830:	78bb      	ldrb	r3, [r7, #2]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b21b      	sxth	r3, r3
 8000838:	b29b      	uxth	r3, r3
 800083a:	803b      	strh	r3, [r7, #0]
			timeout += 1;
 800083c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000840:	3301      	adds	r3, #1
 8000842:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			if (timeout > 0xff)
 8000846:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800084a:	2bff      	cmp	r3, #255	; 0xff
 800084c:	d814      	bhi.n	8000878 <main+0x318>
		while ((lidar_value & 0x01) != 0x00) {
 800084e:	793b      	ldrb	r3, [r7, #4]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1bb      	bne.n	80007d0 <main+0x270>
 8000858:	e00f      	b.n	800087a <main+0x31a>
 800085a:	bf00      	nop
 800085c:	08006530 	.word	0x08006530
 8000860:	080003b9 	.word	0x080003b9
 8000864:	48001015 	.word	0x48001015
 8000868:	20000004 	.word	0x20000004
 800086c:	200001c8 	.word	0x200001c8
 8000870:	2000017c 	.word	0x2000017c
 8000874:	200000c4 	.word	0x200000c4
				break;
 8000878:	bf00      	nop
		}

		uint8_t lidar_ranges = lidar_distance / (100/4); // 100cm broken into 4 groups
 800087a:	883b      	ldrh	r3, [r7, #0]
 800087c:	b29b      	uxth	r3, r3
 800087e:	4a24      	ldr	r2, [pc, #144]	; (8000910 <main+0x3b0>)
 8000880:	fba2 2303 	umull	r2, r3, r2, r3
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	b29b      	uxth	r3, r3
 8000888:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if (lidar_ranges > 3)
 800088c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000890:	2b03      	cmp	r3, #3
 8000892:	d902      	bls.n	800089a <main+0x33a>
			lidar_ranges = 3;
 8000894:	2303      	movs	r3, #3
 8000896:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		if (last_period > 4000)
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <main+0x3b4>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008a2:	d903      	bls.n	80008ac <main+0x34c>
			last_period = 5000;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <main+0x3b4>)
 80008a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80008aa:	801a      	strh	r2, [r3, #0]
		if (lidar_distance > 4000)
 80008ac:	883b      	ldrh	r3, [r7, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008b4:	d902      	bls.n	80008bc <main+0x35c>
			lidar_distance = 5500;
 80008b6:	f241 537c 	movw	r3, #5500	; 0x157c
 80008ba:	803b      	strh	r3, [r7, #0]

		// Serial string turned off as the data is being sent now through the serialiser
		sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", last_period, lidar_distance*10, roll_rate, pitch_rate, yaw_rate);
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <main+0x3b4>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	461c      	mov	r4, r3
 80008c2:	883b      	ldrh	r3, [r7, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	461d      	mov	r5, r3
 80008d2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80008d6:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80008da:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 80008de:	f107 0010 	add.w	r0, r7, #16
 80008e2:	9102      	str	r1, [sp, #8]
 80008e4:	9201      	str	r2, [sp, #4]
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	462b      	mov	r3, r5
 80008ea:	4622      	mov	r2, r4
 80008ec:	490a      	ldr	r1, [pc, #40]	; (8000918 <main+0x3b8>)
 80008ee:	f005 f943 	bl	8005b78 <siprintf>
		//SerialOutputString(string_to_send, &USART1_PORT);
		ball_distance = lidar_distance;
 80008f2:	883b      	ldrh	r3, [r7, #0]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <main+0x3bc>)
 80008f8:	801a      	strh	r2, [r3, #0]
	while (get_ptu_state() != 0)
 80008fa:	f7ff fd51 	bl	80003a0 <get_ptu_state>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	f47f aea6 	bne.w	8000652 <main+0xf2>
 8000906:	2300      	movs	r3, #0

		/* USER CODE BEGIN 3 */
	}

	/* USER CODE END 3 */
}
 8000908:	4618      	mov	r0, r3
 800090a:	3768      	adds	r7, #104	; 0x68
 800090c:	46bd      	mov	sp, r7
 800090e:	bdb0      	pop	{r4, r5, r7, pc}
 8000910:	51eb851f 	.word	0x51eb851f
 8000914:	20000506 	.word	0x20000506
 8000918:	08006518 	.word	0x08006518
 800091c:	200000c0 	.word	0x200000c0

08000920 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b09e      	sub	sp, #120	; 0x78
 8000924:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800092a:	2228      	movs	r2, #40	; 0x28
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f005 f942 	bl	8005bb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	223c      	movs	r2, #60	; 0x3c
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f005 f934 	bl	8005bb8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000950:	2303      	movs	r3, #3
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000954:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000958:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095e:	2301      	movs	r3, #1
 8000960:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	2310      	movs	r3, #16
 8000964:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000974:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800097a:	4618      	mov	r0, r3
 800097c:	f001 ff06 	bl	800278c <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x6a>
	{
		Error_Handler();
 8000986:	f000 f9ab 	bl	8000ce0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	63fb      	str	r3, [r7, #60]	; 0x3c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 ff2e 	bl	8003808 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80009b2:	f000 f995 	bl	8000ce0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <SystemClock_Config+0xc4>)
 80009b8:	603b      	str	r3, [r7, #0]
			|RCC_PERIPHCLK_TIM1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80009be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 f902 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xba>
	{
		Error_Handler();
 80009d6:	f000 f983 	bl	8000ce0 <Error_Handler>
	}
}
 80009da:	bf00      	nop
 80009dc:	3778      	adds	r7, #120	; 0x78
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	00021020 	.word	0x00021020

080009e8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x74>)
 80009ee:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <MX_I2C1_Init+0x78>)
 80009f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_I2C1_Init+0x74>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x7c>)
 80009f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a24:	f000 ffd2 	bl	80019cc <HAL_I2C_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000a2e:	f000 f957 	bl	8000ce0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a36:	f001 fd3f 	bl	80024b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000a40:	f000 f94e 	bl	8000ce0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a48:	f001 fd81 	bl	800254e <HAL_I2CEx_ConfigDigitalFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000a52:	f000 f945 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000c4 	.word	0x200000c4
 8000a60:	40005400 	.word	0x40005400
 8000a64:	2000090e 	.word	0x2000090e

08000a68 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_SPI1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a78:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a86:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ac8:	f003 fa34 	bl	8003f34 <HAL_SPI_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000ad2:	f000 f905 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000118 	.word	0x20000118
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b12:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <MX_TIM1_Init+0xe8>)
 8000b14:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 47;
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b18:	222f      	movs	r2, #47	; 0x2f
 8000b1a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b28:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3c:	4822      	ldr	r0, [pc, #136]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b3e:	f003 faa4 	bl	800408a <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x68>
	{
		Error_Handler();
 8000b48:	f000 f8ca 	bl	8000ce0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	4619      	mov	r1, r3
 8000b58:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b5a:	f004 f8b9 	bl	8004cd0 <HAL_TIM_ConfigClockSource>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0x84>
	{
		Error_Handler();
 8000b64:	f000 f8bc 	bl	8000ce0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b68:	4817      	ldr	r0, [pc, #92]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b6a:	f003 fc3d 	bl	80043e8 <HAL_TIM_IC_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 8000b74:	f000 f8b4 	bl	8000ce0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000b8c:	f004 ff1a 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0xb6>
	{
		Error_Handler();
 8000b96:	f000 f8a3 	bl	8000ce0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_TIM1_Init+0xe4>)
 8000bb2:	f003 fedc 	bl	800496e <HAL_TIM_IC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 8000bbc:	f000 f890 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3730      	adds	r7, #48	; 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000017c 	.word	0x2000017c
 8000bcc:	40012c00 	.word	0x40012c00

08000bd0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 47;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000bfe:	222f      	movs	r2, #47	; 0x2f
 8000c00:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000;
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c0a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000c0e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c1e:	f003 fa8b 	bl	8004138 <HAL_TIM_PWM_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000c28:	f000 f85a 	bl	8000ce0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4817      	ldr	r0, [pc, #92]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c3c:	f004 fec2 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8000c46:	f000 f84b 	bl	8000ce0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 2000;
 8000c4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c52:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c64:	f003 ff20 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0xa2>
	{
		Error_Handler();
 8000c6e:	f000 f837 	bl	8000ce0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2204      	movs	r2, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c7a:	f003 ff15 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xb8>
	{
		Error_Handler();
 8000c84:	f000 f82c 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM2_Init+0xc8>)
 8000c8a:	f000 fa47 	bl	800111c <HAL_TIM_MspPostInit>

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001c8 	.word	0x200001c8

08000c9c <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <MX_USB_PCD_Init+0x40>)
 8000ca4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000ca8:	2208      	movs	r2, #8
 8000caa:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cc6:	f001 fc8e 	bl	80025e6 <HAL_PCD_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USB_PCD_Init+0x38>
	{
		Error_Handler();
 8000cd0:	f000 f806 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000214 	.word	0x20000214
 8000cdc:	40005c00 	.word	0x40005c00

08000ce0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>

08000cea <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b088      	sub	sp, #32
 8000cee:	af04      	add	r7, sp, #16
 8000cf0:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	f107 030e 	add.w	r3, r7, #14
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	21d2      	movs	r1, #210	; 0xd2
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 feec 	bl	8001aec <HAL_I2C_Mem_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	9302      	str	r3, [sp, #8]
 8000d20:	2301      	movs	r3, #1
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	f107 030d 	add.w	r3, r7, #13
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2221      	movs	r2, #33	; 0x21
 8000d2e:	21d2      	movs	r1, #210	; 0xd2
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fedb 	bl	8001aec <HAL_I2C_Mem_Write>
 8000d36:	4603      	mov	r3, r0
 8000d38:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	f107 030d 	add.w	r3, r7, #13
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	2222      	movs	r2, #34	; 0x22
 8000d4c:	21d2      	movs	r1, #210	; 0xd2
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 fecc 	bl	8001aec <HAL_I2C_Mem_Write>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	9302      	str	r3, [sp, #8]
 8000d60:	2301      	movs	r3, #1
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	21c4      	movs	r1, #196	; 0xc4
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 febb 	bl	8001aec <HAL_I2C_Mem_Write>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <SerialInitialise+0xe4>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <SerialInitialise+0xe4>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <SerialInitialise+0xe4>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a30      	ldr	r2, [pc, #192]	; (8000e68 <SerialInitialise+0xe4>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d106      	bne.n	8000dc4 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <SerialInitialise+0xe4>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <SerialInitialise+0xe4>)
 8000dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc0:	6153      	str	r3, [r2, #20]
		break;
 8000dc2:	e000      	b.n	8000dc6 <SerialInitialise+0x42>
	default:
		break;
 8000dc4:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000dce:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000dd8:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	69d9      	ldr	r1, [r3, #28]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d821      	bhi.n	8000e4a <SerialInitialise+0xc6>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <SerialInitialise+0x88>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e21 	.word	0x08000e21
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e31 	.word	0x08000e31
 8000e18:	08000e39 	.word	0x08000e39
 8000e1c:	08000e41 	.word	0x08000e41
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2246      	movs	r2, #70	; 0x46
 8000e24:	801a      	strh	r2, [r3, #0]
		break;
 8000e26:	e010      	b.n	8000e4a <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2246      	movs	r2, #70	; 0x46
 8000e2c:	801a      	strh	r2, [r3, #0]
		break;
 8000e2e:	e00c      	b.n	8000e4a <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	2246      	movs	r2, #70	; 0x46
 8000e34:	801a      	strh	r2, [r3, #0]
		break;
 8000e36:	e008      	b.n	8000e4a <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2246      	movs	r2, #70	; 0x46
 8000e3c:	801a      	strh	r2, [r3, #0]
		break;
 8000e3e:	e004      	b.n	8000e4a <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46* 0x06;  // 115200 at 8MHz
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000e46:	801a      	strh	r2, [r3, #0]
		break;
 8000e48:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f042 020d 	orr.w	r2, r2, #13
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	371c      	adds	r7, #28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000e78:	bf00      	nop
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f8      	beq.n	8000e7a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	801a      	strh	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000eac:	e00b      	b.n	8000ec6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ffd9 	bl	8000e6c <SerialOutputChar>
		counter++;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
		pt++;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1ef      	bne.n	8000eae <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	4798      	blx	r3
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x44>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x44>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x44>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f000 fb80 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_I2C_MspInit+0x7c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d127      	bne.n	8000fa2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6e:	2312      	movs	r3, #18
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_I2C_MspInit+0x84>)
 8000f86:	f000 fb8f 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <HAL_SPI_MspInit+0x7c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d128      	bne.n	800102c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_SPI_MspInit+0x80>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <HAL_SPI_MspInit+0x80>)
 8000fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_SPI_MspInit+0x80>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_SPI_MspInit+0x80>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_SPI_MspInit+0x80>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_SPI_MspInit+0x80>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800100a:	23e0      	movs	r3, #224	; 0xe0
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f000 fb3e 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013000 	.word	0x40013000
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_TIM_Base_MspInit+0x90>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d131      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_TIM_Base_MspInit+0x94>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_TIM_Base_MspInit+0x94>)
 8001064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_TIM_Base_MspInit+0x94>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_TIM_Base_MspInit+0x94>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <HAL_TIM_Base_MspInit+0x94>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6153      	str	r3, [r2, #20]
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_TIM_Base_MspInit+0x94>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800108e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010a0:	2306      	movs	r3, #6
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f000 fafb 	bl	80016a8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	201b      	movs	r0, #27
 80010b8:	f000 fabf 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010bc:	201b      	movs	r0, #27
 80010be:	f000 fad8 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40012c00 	.word	0x40012c00
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d113      	bne.n	800110e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_TIM_PWM_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_TIM_PWM_MspInit+0x44>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_TIM_PWM_MspInit+0x44>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	201c      	movs	r0, #28
 8001104:	f000 fa99 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001108:	201c      	movs	r0, #28
 800110a:	f000 fab2 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800113c:	d11d      	bne.n	800117a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_TIM_MspPostInit+0x68>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_TIM_MspPostInit+0x68>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_TIM_MspPostInit+0x68>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001156:	f248 0302 	movw	r3, #32770	; 0x8002
 800115a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f000 fa97 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_PCD_MspInit+0x80>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d129      	bne.n	80011fe <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_PCD_MspInit+0x84>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_PCD_MspInit+0x84>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_PCD_MspInit+0x84>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80011c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011d4:	230e      	movs	r3, #14
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f000 fa61 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_PCD_MspInit+0x84>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_PCD_MspInit+0x84>)
 80011ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_PCD_MspInit+0x84>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40005c00 	.word	0x40005c00
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8ce 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM1_CC_IRQHandler+0x10>)
 800126a:	f003 fa61 	bl	8004730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000017c 	.word	0x2000017c

08001278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM2_IRQHandler+0x10>)
 800127e:	f003 fa57 	bl	8004730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001c8 	.word	0x200001c8

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f004 fc84 	bl	8005bc8 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000a000 	.word	0x2000a000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	20000508 	.word	0x20000508
 80012f4:	20000658 	.word	0x20000658

080012f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SystemInit+0x20>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <SystemInit+0x20>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001320:	f7ff ffea 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopForever+0x6>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopForever+0xe>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopForever+0x16>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f004 fc43 	bl	8005bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134e:	f7ff f907 	bl	8000560 <main>

08001352 <LoopForever>:

LoopForever:
    b LoopForever
 8001352:	e7fe      	b.n	8001352 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001354:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001360:	080065b4 	.word	0x080065b4
  ldr r2, =_sbss
 8001364:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001368:	20000658 	.word	0x20000658

0800136c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_2_IRQHandler>
	...

08001370 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_Init+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_Init+0x28>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f94f 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fdac 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f967 	bl	800168e <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d8:	f000 f92f 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000044 	.word	0x20000044
 80013f4:	2000004c 	.word	0x2000004c
 80013f8:	20000048 	.word	0x20000048

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2000004c 	.word	0x2000004c
 8001420:	2000050c 	.word	0x2000050c

08001424 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;  
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	2000050c 	.word	0x2000050c

0800143c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000004c 	.word	0x2000004c

08001484 <__NVIC_SetPriorityGrouping>:
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff3e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff8e 	bl	8001578 <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff31 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e154      	b.n	8001962 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8146 	beq.w	800195c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d005      	beq.n	80016e8 <HAL_GPIO_Init+0x40>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d130      	bne.n	800174a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171e:	2201      	movs	r2, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b03      	cmp	r3, #3
 8001754:	d017      	beq.n	8001786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d123      	bne.n	80017da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	6939      	ldr	r1, [r7, #16]
 80017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a0 	beq.w	800195c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181c:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_GPIO_Init+0x2d8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_GPIO_Init+0x2d8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b55      	ldr	r3, [pc, #340]	; (8001980 <HAL_GPIO_Init+0x2d8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001834:	4a53      	ldr	r2, [pc, #332]	; (8001984 <HAL_GPIO_Init+0x2dc>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185e:	d019      	beq.n	8001894 <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2e4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00d      	beq.n	800188c <HAL_GPIO_Init+0x1e4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d007      	beq.n	8001888 <HAL_GPIO_Init+0x1e0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a46      	ldr	r2, [pc, #280]	; (8001994 <HAL_GPIO_Init+0x2ec>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_GPIO_Init+0x1dc>
 8001880:	2304      	movs	r3, #4
 8001882:	e008      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001884:	2305      	movs	r3, #5
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001888:	2303      	movs	r3, #3
 800188a:	e004      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 800188c:	2302      	movs	r3, #2
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001894:	2300      	movs	r3, #0
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	f002 0203 	and.w	r2, r2, #3
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	4093      	lsls	r3, r2
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a6:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2dc>)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f aea3 	bne.w	80016b8 <HAL_GPIO_Init+0x10>
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	48000400 	.word	0x48000400
 800198c:	48000800 	.word	0x48000800
 8001990:	48000c00 	.word	0x48000c00
 8001994:	48001000 	.word	0x48001000
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e081      	b.n	8001ae2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fa9c 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	e006      	b.n	8001a54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d104      	bne.n	8001a66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69d9      	ldr	r1, [r3, #28]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	817b      	strh	r3, [r7, #10]
 8001afe:	460b      	mov	r3, r1
 8001b00:	813b      	strh	r3, [r7, #8]
 8001b02:	4613      	mov	r3, r2
 8001b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	f040 80f9 	bne.w	8001d06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_I2C_Mem_Write+0x34>
 8001b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0ed      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_I2C_Mem_Write+0x4e>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0e6      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b42:	f7ff fc6f 	bl	8001424 <HAL_GetTick>
 8001b46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2319      	movs	r3, #25
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fac3 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0d1      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2221      	movs	r2, #33	; 0x21
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a3a      	ldr	r2, [r7, #32]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b8c:	88f8      	ldrh	r0, [r7, #6]
 8001b8e:	893a      	ldrh	r2, [r7, #8]
 8001b90:	8979      	ldrh	r1, [r7, #10]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f9d3 	bl	8001f48 <I2C_RequestMemoryWrite>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0a9      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d90e      	bls.n	8001bdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	22ff      	movs	r2, #255	; 0xff
 8001bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	8979      	ldrh	r1, [r7, #10]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fc3d 	bl	8002454 <I2C_TransferConfig>
 8001bda:	e00f      	b.n	8001bfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	8979      	ldrh	r1, [r7, #10]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fc2c 	bl	8002454 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fabc 	bl	800217e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e07b      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d034      	beq.n	8001cb4 <HAL_I2C_Mem_Write+0x1c8>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d130      	bne.n	8001cb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fa3f 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e04d      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	d90e      	bls.n	8001c94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	22ff      	movs	r2, #255	; 0xff
 8001c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	8979      	ldrh	r1, [r7, #10]
 8001c84:	2300      	movs	r3, #0
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 fbe1 	bl	8002454 <I2C_TransferConfig>
 8001c92:	e00f      	b.n	8001cb4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	8979      	ldrh	r1, [r7, #10]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fbd0 	bl	8002454 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d19e      	bne.n	8001bfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 faa2 	bl	800220c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e01a      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_I2C_Mem_Write+0x224>)
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
  }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	fe00e800 	.word	0xfe00e800

08001d14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	817b      	strh	r3, [r7, #10]
 8001d26:	460b      	mov	r3, r1
 8001d28:	813b      	strh	r3, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	f040 80fd 	bne.w	8001f36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_I2C_Mem_Read+0x34>
 8001d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0f1      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_Mem_Read+0x4e>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e0ea      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d6a:	f7ff fb5b 	bl	8001424 <HAL_GetTick>
 8001d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2319      	movs	r3, #25
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f9af 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0d5      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2222      	movs	r2, #34	; 0x22
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a3a      	ldr	r2, [r7, #32]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db4:	88f8      	ldrh	r0, [r7, #6]
 8001db6:	893a      	ldrh	r2, [r7, #8]
 8001db8:	8979      	ldrh	r1, [r7, #10]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f913 	bl	8001ff0 <I2C_RequestMemoryRead>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0ad      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2bff      	cmp	r3, #255	; 0xff
 8001de4:	d90e      	bls.n	8001e04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	22ff      	movs	r2, #255	; 0xff
 8001dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	8979      	ldrh	r1, [r7, #10]
 8001df4:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_I2C_Mem_Read+0x22c>)
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fb29 	bl	8002454 <I2C_TransferConfig>
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_I2C_Mem_Read+0x22c>)
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fb18 	bl	8002454 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f956 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07c      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d034      	beq.n	8001ee4 <HAL_I2C_Mem_Read+0x1d0>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d130      	bne.n	8001ee4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f927 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e04d      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2bff      	cmp	r3, #255	; 0xff
 8001ea4:	d90e      	bls.n	8001ec4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	22ff      	movs	r2, #255	; 0xff
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	8979      	ldrh	r1, [r7, #10]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fac9 	bl	8002454 <I2C_TransferConfig>
 8001ec2:	e00f      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	8979      	ldrh	r1, [r7, #10]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fab8 	bl	8002454 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d19a      	bne.n	8001e24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f98a 	bl	800220c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e01a      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2220      	movs	r2, #32
 8001f08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_I2C_Mem_Read+0x230>)
 8001f16:	400b      	ands	r3, r1
 8001f18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	80002400 	.word	0x80002400
 8001f44:	fe00e800 	.word	0xfe00e800

08001f48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	813b      	strh	r3, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <I2C_RequestMemoryWrite+0xa4>)
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fa6f 	bl	8002454 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	69b9      	ldr	r1, [r7, #24]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f8ff 	bl	800217e <I2C_WaitOnTXISFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e02c      	b.n	8001fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f90:	893b      	ldrh	r3, [r7, #8]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
 8001f9a:	e015      	b.n	8001fc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f9c:	893b      	ldrh	r3, [r7, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	69b9      	ldr	r1, [r7, #24]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8e5 	bl	800217e <I2C_WaitOnTXISFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e012      	b.n	8001fe4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fbe:	893b      	ldrh	r3, [r7, #8]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f884 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	80002000 	.word	0x80002000

08001ff0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	817b      	strh	r3, [r7, #10]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	8979      	ldrh	r1, [r7, #10]
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <I2C_RequestMemoryRead+0xa4>)
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fa1c 	bl	8002454 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f8ac 	bl	800217e <I2C_WaitOnTXISFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e02c      	b.n	800208a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002036:	893b      	ldrh	r3, [r7, #8]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
 8002040:	e015      	b.n	800206e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002042:	893b      	ldrh	r3, [r7, #8]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	b29b      	uxth	r3, r3
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f892 	bl	800217e <I2C_WaitOnTXISFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e012      	b.n	800208a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002064:	893b      	ldrh	r3, [r7, #8]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2200      	movs	r2, #0
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f831 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	80002000 	.word	0x80002000

08002098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d103      	bne.n	80020b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d007      	beq.n	80020d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	619a      	str	r2, [r3, #24]
  }
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f0:	e031      	b.n	8002156 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f8:	d02d      	beq.n	8002156 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fa:	f7ff f993 	bl	8001424 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d302      	bcc.n	8002110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d122      	bne.n	8002156 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	429a      	cmp	r2, r3
 800212c:	d113      	bne.n	8002156 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4013      	ands	r3, r2
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	429a      	cmp	r2, r3
 8002172:	d0be      	beq.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800218a:	e033      	b.n	80021f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f87f 	bl	8002294 <I2C_IsErrorOccurred>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e031      	b.n	8002204 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a6:	d025      	beq.n	80021f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a8:	f7ff f93c 	bl	8001424 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d302      	bcc.n	80021be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11a      	bne.n	80021f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d013      	beq.n	80021f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e007      	b.n	8002204 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d1c4      	bne.n	800218c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002218:	e02f      	b.n	800227a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f838 	bl	8002294 <I2C_IsErrorOccurred>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e02d      	b.n	800228a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7ff f8f9 	bl	8001424 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11a      	bne.n	800227a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b20      	cmp	r3, #32
 8002250:	d013      	beq.n	800227a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0220 	orr.w	r2, r3, #32
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e007      	b.n	800228a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b20      	cmp	r3, #32
 8002286:	d1c8      	bne.n	800221a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d068      	beq.n	8002392 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2210      	movs	r2, #16
 80022c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022c8:	e049      	b.n	800235e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d0:	d045      	beq.n	800235e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7ff f8a7 	bl	8001424 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_IsErrorOccurred+0x54>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13a      	bne.n	800235e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230a:	d121      	bne.n	8002350 <I2C_IsErrorOccurred+0xbc>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002312:	d01d      	beq.n	8002350 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b20      	cmp	r3, #32
 8002318:	d01a      	beq.n	8002350 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002328:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800232a:	f7ff f87b 	bl	8001424 <HAL_GetTick>
 800232e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002330:	e00e      	b.n	8002350 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002332:	f7ff f877 	bl	8001424 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b19      	cmp	r3, #25
 800233e:	d907      	bls.n	8002350 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	f043 0320 	orr.w	r3, r3, #32
 8002346:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800234e:	e006      	b.n	800235e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b20      	cmp	r3, #32
 800235c:	d1e9      	bne.n	8002332 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b20      	cmp	r3, #32
 800236a:	d003      	beq.n	8002374 <I2C_IsErrorOccurred+0xe0>
 800236c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0aa      	beq.n	80022ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002378:	2b00      	cmp	r3, #0
 800237a:	d103      	bne.n	8002384 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2220      	movs	r2, #32
 8002382:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00b      	beq.n	80023bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01c      	beq.n	8002442 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7ff fe45 	bl	8002098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <I2C_IsErrorOccurred+0x1bc>)
 800241a:	400b      	ands	r3, r1
 800241c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	431a      	orrs	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002446:	4618      	mov	r0, r3
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	fe00e800 	.word	0xfe00e800

08002454 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	817b      	strh	r3, [r7, #10]
 8002462:	4613      	mov	r3, r2
 8002464:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002466:	897b      	ldrh	r3, [r7, #10]
 8002468:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800246c:	7a7b      	ldrb	r3, [r7, #9]
 800246e:	041b      	lsls	r3, r3, #16
 8002470:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002474:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	4313      	orrs	r3, r2
 800247e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002482:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	0d5b      	lsrs	r3, r3, #21
 800248e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <I2C_TransferConfig+0x60>)
 8002494:	430b      	orrs	r3, r1
 8002496:	43db      	mvns	r3, r3
 8002498:	ea02 0103 	and.w	r1, r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	03ff63ff 	.word	0x03ff63ff

080024b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d138      	bne.n	8002540 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024d8:	2302      	movs	r3, #2
 80024da:	e032      	b.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800250a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b20      	cmp	r3, #32
 8002562:	d139      	bne.n	80025d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800256e:	2302      	movs	r3, #2
 8002570:	e033      	b.n	80025da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2224      	movs	r2, #36	; 0x24
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e8:	b08b      	sub	sp, #44	; 0x2c
 80025ea:	af06      	add	r7, sp, #24
 80025ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0c4      	b.n	8002782 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe fdbb 	bl	8001188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2203      	movs	r2, #3
 8002616:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fa6e 	bl	8005b00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e040      	b.n	80026ac <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	3301      	adds	r3, #1
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	3303      	adds	r3, #3
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	3338      	adds	r3, #56	; 0x38
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	333c      	adds	r3, #60	; 0x3c
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	3340      	adds	r3, #64	; 0x40
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	3301      	adds	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d3b9      	bcc.n	800262a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e044      	b.n	8002746 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	3301      	adds	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	429a      	cmp	r2, r3
 800274e:	d3b5      	bcc.n	80026bc <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	687e      	ldr	r6, [r7, #4]
 8002758:	466d      	mov	r5, sp
 800275a:	f106 0410 	add.w	r4, r6, #16
 800275e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	602b      	str	r3, [r5, #0]
 8002766:	1d33      	adds	r3, r6, #4
 8002768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	f003 f9e3 	bl	8005b36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800278c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002792:	af00      	add	r7, sp, #0
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f001 b823 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 817d 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027c8:	4bbc      	ldr	r3, [pc, #752]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d00c      	beq.n	80027ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d4:	4bb9      	ldr	r3, [pc, #740]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d15c      	bne.n	800289a <HAL_RCC_OscConfig+0x10e>
 80027e0:	4bb6      	ldr	r3, [pc, #728]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d155      	bne.n	800289a <HAL_RCC_OscConfig+0x10e>
 80027ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002802:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x94>
 800281a:	4ba8      	ldr	r3, [pc, #672]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0xc0>
 8002820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002824:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800283c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002848:	4b9c      	ldr	r3, [pc, #624]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002850:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002854:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002860:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 811f 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x334>
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8116 	bne.w	8002ac0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	f000 bfaf 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x12e>
 80028ac:	4b83      	ldr	r3, [pc, #524]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a82      	ldr	r2, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e036      	b.n	8002928 <HAL_RCC_OscConfig+0x19c>
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x158>
 80028ca:	4b7c      	ldr	r3, [pc, #496]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a7b      	ldr	r2, [pc, #492]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b79      	ldr	r3, [pc, #484]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a78      	ldr	r2, [pc, #480]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e021      	b.n	8002928 <HAL_RCC_OscConfig+0x19c>
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x184>
 80028f6:	4b71      	ldr	r3, [pc, #452]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a70      	ldr	r2, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6d      	ldr	r2, [pc, #436]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x19c>
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a69      	ldr	r2, [pc, #420]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a66      	ldr	r2, [pc, #408]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002928:	4b64      	ldr	r3, [pc, #400]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	f023 020f 	bic.w	r2, r3, #15
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	495f      	ldr	r1, [pc, #380]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800293e:	4313      	orrs	r3, r2
 8002940:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d059      	beq.n	8002a06 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fd67 	bl	8001424 <HAL_GetTick>
 8002956:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fd62 	bl	8001424 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	; 0x64
 800296a:	d902      	bls.n	8002972 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	f000 bf43 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002976:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002986:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_RCC_OscConfig+0x218>
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e015      	b.n	80029d0 <HAL_RCC_OscConfig+0x244>
 80029a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029e8:	fab2 f282 	clz	r2, r2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f042 0220 	orr.w	r2, r2, #32
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f002 021f 	and.w	r2, r2, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ab      	beq.n	800295c <HAL_RCC_OscConfig+0x1d0>
 8002a04:	e05d      	b.n	8002ac2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fd0d 	bl	8001424 <HAL_GetTick>
 8002a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fd08 	bl	8001424 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d902      	bls.n	8002a26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f000 bee9 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2cc>
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0x2f8>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a70:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a88:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a98:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a9c:	fab2 f282 	clz	r2, r2
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f042 0220 	orr.w	r2, r2, #32
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f002 021f 	and.w	r2, r2, #31
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ab      	bne.n	8002a10 <HAL_RCC_OscConfig+0x284>
 8002ab8:	e003      	b.n	8002ac2 <HAL_RCC_OscConfig+0x336>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 817d 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ad8:	4ba6      	ldr	r3, [pc, #664]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ae4:	4ba3      	ldr	r3, [pc, #652]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d172      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002af0:	4ba0      	ldr	r3, [pc, #640]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d16c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3a0>
 8002b26:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e013      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c8>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b3e:	2302      	movs	r3, #2
 8002b40:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b44:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b50:	4b88      	ldr	r3, [pc, #544]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	2202      	movs	r2, #2
 8002b56:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b5a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b5e:	fa92 f2a2 	rbit	r2, r2
 8002b62:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b66:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f042 0220 	orr.w	r2, r2, #32
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f002 021f 	and.w	r2, r2, #31
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCC_OscConfig+0x410>
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d002      	beq.n	8002b9c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f000 be2e 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	21f8      	movs	r1, #248	; 0xf8
 8002bb2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002bba:	fa91 f1a1 	rbit	r1, r1
 8002bbe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002bc2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002bc6:	fab1 f181 	clz	r1, r1
 8002bca:	b2c9      	uxtb	r1, r1
 8002bcc:	408b      	lsls	r3, r1
 8002bce:	4969      	ldr	r1, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd4:	e0fd      	b.n	8002dd2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8088 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x56c>
 8002be8:	2301      	movs	r3, #1
 8002bea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bfa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2301      	movs	r3, #1
 8002c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc06 	bl	8001424 <HAL_GetTick>
 8002c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fc01 	bl	8001424 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	f000 bde2 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4d8>
 8002c5e:	4b45      	ldr	r3, [pc, #276]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	e013      	b.n	8002c8c <HAL_RCC_OscConfig+0x500>
 8002c64:	2302      	movs	r3, #2
 8002c66:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c88:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c9e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0af      	beq.n	8002c1e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	21f8      	movs	r1, #248	; 0xf8
 8002cd4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cdc:	fa91 f1a1 	rbit	r1, r1
 8002ce0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ce4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ce8:	fab1 f181 	clz	r1, r1
 8002cec:	b2c9      	uxtb	r1, r1
 8002cee:	408b      	lsls	r3, r1
 8002cf0:	4920      	ldr	r1, [pc, #128]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
 8002cf6:	e06c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x646>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2300      	movs	r3, #0
 8002d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fb7e 	bl	8001424 <HAL_GetTick>
 8002d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fb79 	bl	8001424 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d902      	bls.n	8002d44 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	f000 bd5a 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d104      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5ec>
 8002d6e:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e015      	b.n	8002da0 <HAL_RCC_OscConfig+0x614>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d9c:	4bc8      	ldr	r3, [pc, #800]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2202      	movs	r2, #2
 8002da2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002da6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002daa:	fa92 f2a2 	rbit	r2, r2
 8002dae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002db2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002db6:	fab2 f282 	clz	r2, r2
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f042 0220 	orr.w	r2, r2, #32
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f002 021f 	and.w	r2, r2, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ad      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8110 	beq.w	8003008 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d079      	beq.n	8002eec <HAL_RCC_OscConfig+0x760>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4bab      	ldr	r3, [pc, #684]	; (80030c4 <HAL_RCC_OscConfig+0x938>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2301      	movs	r3, #1
 8002e20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fe faff 	bl	8001424 <HAL_GetTick>
 8002e26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fafa 	bl	8001424 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d902      	bls.n	8002e42 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	f000 bcdb 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002e42:	2302      	movs	r3, #2
 8002e44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e80:	2202      	movs	r2, #2
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9c:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	6019      	str	r1, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f1a3 	rbit	r1, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ec2:	6019      	str	r1, [r3, #0]
  return result;
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0a0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x6a0>
 8002eea:	e08d      	b.n	8003008 <HAL_RCC_OscConfig+0x87c>
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f0e:	601a      	str	r2, [r3, #0]
  return result;
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x938>)
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fa79 	bl	8001424 <HAL_GetTick>
 8002f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe fa74 	bl	8001424 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f000 bc55 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f56:	2202      	movs	r2, #2
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	6019      	str	r1, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f1a3 	rbit	r1, r3
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fe0:	6019      	str	r1, [r3, #0]
  return result;
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d197      	bne.n	8002f38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 81a1 	beq.w	8003360 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d116      	bne.n	800305e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	61d3      	str	r3, [r2, #28]
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003056:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11a      	bne.n	80030a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7fe f9d5 	bl	8001424 <HAL_GetTick>
 800307a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	e009      	b.n	8003094 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003080:	f7fe f9d0 	bl	8001424 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e3b1      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ef      	beq.n	8003080 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d10d      	bne.n	80030cc <HAL_RCC_OscConfig+0x940>
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a02      	ldr	r2, [pc, #8]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	e03c      	b.n	8003138 <HAL_RCC_OscConfig+0x9ac>
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	10908120 	.word	0x10908120
 80030c8:	40007000 	.word	0x40007000
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x96a>
 80030dc:	4bc1      	ldr	r3, [pc, #772]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4ac0      	ldr	r2, [pc, #768]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6213      	str	r3, [r2, #32]
 80030e8:	4bbe      	ldr	r3, [pc, #760]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4abd      	ldr	r2, [pc, #756]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e020      	b.n	8003138 <HAL_RCC_OscConfig+0x9ac>
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b05      	cmp	r3, #5
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x994>
 8003106:	4bb7      	ldr	r3, [pc, #732]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4ab6      	ldr	r2, [pc, #728]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6213      	str	r3, [r2, #32]
 8003112:	4bb4      	ldr	r3, [pc, #720]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4ab3      	ldr	r2, [pc, #716]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0x9ac>
 8003120:	4bb0      	ldr	r3, [pc, #704]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4aaf      	ldr	r2, [pc, #700]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	4bad      	ldr	r3, [pc, #692]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4aac      	ldr	r2, [pc, #688]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8081 	beq.w	800324c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe f96b 	bl	8001424 <HAL_GetTick>
 800314e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe f966 	bl	8001424 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e345      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003174:	2202      	movs	r2, #2
 8003176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003198:	2202      	movs	r2, #2
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031b2:	601a      	str	r2, [r3, #0]
  return result;
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d102      	bne.n	80031d8 <HAL_RCC_OscConfig+0xa4c>
 80031d2:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	e013      	b.n	8003200 <HAL_RCC_OscConfig+0xa74>
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031e0:	2202      	movs	r2, #2
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	4b79      	ldr	r3, [pc, #484]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003204:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003208:	2102      	movs	r1, #2
 800320a:	6011      	str	r1, [r2, #0]
 800320c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003210:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	fa92 f1a2 	rbit	r1, r2
 800321a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800321e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003222:	6011      	str	r1, [r2, #0]
  return result;
 8003224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003228:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d084      	beq.n	8003154 <HAL_RCC_OscConfig+0x9c8>
 800324a:	e07f      	b.n	800334c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fe f8ea 	bl	8001424 <HAL_GetTick>
 8003250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe f8e5 	bl	8001424 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e2c4      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800329a:	2202      	movs	r2, #2
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032b4:	601a      	str	r2, [r3, #0]
  return result;
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d102      	bne.n	80032da <HAL_RCC_OscConfig+0xb4e>
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	e013      	b.n	8003302 <HAL_RCC_OscConfig+0xb76>
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003306:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800330a:	2102      	movs	r1, #2
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003312:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	fa92 f1a2 	rbit	r1, r2
 800331c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003320:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003324:	6011      	str	r1, [r2, #0]
  return result;
 8003326:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800332a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f002 021f 	and.w	r2, r2, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d184      	bne.n	8003256 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800334c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8242 	beq.w	80037f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	f000 8213 	beq.w	80037a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b02      	cmp	r3, #2
 800338e:	f040 8162 	bne.w	8003656 <HAL_RCC_OscConfig+0xeca>
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800339a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800339e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033b6:	601a      	str	r2, [r3, #0]
  return result;
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	2300      	movs	r3, #0
 80033d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe f824 	bl	8001424 <HAL_GetTick>
 80033dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e0:	e00c      	b.n	80033fc <HAL_RCC_OscConfig+0xc70>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe f81c 	bl	8001424 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1fd      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003420:	601a      	str	r2, [r3, #0]
  return result;
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800342a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d102      	bne.n	8003446 <HAL_RCC_OscConfig+0xcba>
 8003440:	4bb0      	ldr	r3, [pc, #704]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	e027      	b.n	8003496 <HAL_RCC_OscConfig+0xd0a>
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800344e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	fa93 f2a3 	rbit	r2, r3
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003470:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	4b9c      	ldr	r3, [pc, #624]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800349e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034a2:	6011      	str	r1, [r2, #0]
 80034a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	fa92 f1a2 	rbit	r1, r2
 80034b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034ba:	6011      	str	r1, [r2, #0]
  return result;
 80034bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f042 0220 	orr.w	r2, r2, #32
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f002 021f 	and.w	r2, r2, #31
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d182      	bne.n	80033e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e2:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	430b      	orrs	r3, r1
 8003504:	497f      	ldr	r1, [pc, #508]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003512:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800352e:	601a      	str	r2, [r3, #0]
  return result;
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003538:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003544:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	461a      	mov	r2, r3
 800354c:	2301      	movs	r3, #1
 800354e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd ff68 	bl	8001424 <HAL_GetTick>
 8003554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	e009      	b.n	800356e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355a:	f7fd ff63 	bl	8001424 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e144      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800359c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0xe2c>
 80035b2:	4b54      	ldr	r3, [pc, #336]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	e027      	b.n	8003608 <HAL_RCC_OscConfig+0xe7c>
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003610:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003614:	6011      	str	r1, [r2, #0]
 8003616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800361a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	fa92 f1a2 	rbit	r1, r2
 8003624:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003628:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800362c:	6011      	str	r1, [r2, #0]
  return result;
 800362e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003632:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	fab2 f282 	clz	r2, r2
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f042 0220 	orr.w	r2, r2, #32
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f002 021f 	and.w	r2, r2, #31
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f202 	lsl.w	r2, r1, r2
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d082      	beq.n	800355a <HAL_RCC_OscConfig+0xdce>
 8003654:	e0cf      	b.n	80037f6 <HAL_RCC_OscConfig+0x106a>
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800365e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003684:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	461a      	mov	r2, r3
 8003698:	2300      	movs	r3, #0
 800369a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fd fec2 	bl	8001424 <HAL_GetTick>
 80036a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a4:	e009      	b.n	80036ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd febd 	bl	8001424 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e09e      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	fa93 f2a3 	rbit	r2, r3
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036de:	601a      	str	r2, [r3, #0]
  return result;
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d104      	bne.n	8003708 <HAL_RCC_OscConfig+0xf7c>
 80036fe:	4b01      	ldr	r3, [pc, #4]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e029      	b.n	8003758 <HAL_RCC_OscConfig+0xfcc>
 8003704:	40021000 	.word	0x40021000
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003728:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003740:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x1078>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800375c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003760:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003764:	6011      	str	r1, [r2, #0]
 8003766:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800376a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	fa92 f1a2 	rbit	r1, r2
 8003774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003778:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800377c:	6011      	str	r1, [r2, #0]
  return result;
 800377e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003782:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f002 021f 	and.w	r2, r2, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f202 	lsl.w	r2, r1, r2
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d180      	bne.n	80036a6 <HAL_RCC_OscConfig+0xf1a>
 80037a4:	e027      	b.n	80037f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e01e      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_OscConfig+0x1078>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10b      	bne.n	80037f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000

08003808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b09e      	sub	sp, #120	; 0x78
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e162      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b90      	ldr	r3, [pc, #576]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0207 	bic.w	r2, r3, #7
 8003836:	498b      	ldr	r1, [pc, #556]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b89      	ldr	r3, [pc, #548]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e14a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b82      	ldr	r3, [pc, #520]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	497f      	ldr	r1, [pc, #508]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80dc 	beq.w	8003a34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d13c      	bne.n	80038fe <HAL_RCC_ClockConfig+0xf6>
 8003884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003888:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_RCC_ClockConfig+0xa6>
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	e00f      	b.n	80038ce <HAL_RCC_ClockConfig+0xc6>
 80038ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	667b      	str	r3, [r7, #100]	; 0x64
 80038bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
 80038c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80038d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038d6:	fa92 f2a2 	rbit	r2, r2
 80038da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038de:	fab2 f282 	clz	r2, r2
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f042 0220 	orr.w	r2, r2, #32
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f002 021f 	and.w	r2, r2, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d17b      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0f3      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d13c      	bne.n	8003980 <HAL_RCC_ClockConfig+0x178>
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HAL_RCC_ClockConfig+0x128>
 800392a:	4b4f      	ldr	r3, [pc, #316]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	e00f      	b.n	8003950 <HAL_RCC_ClockConfig+0x148>
 8003930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003934:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	647b      	str	r3, [r7, #68]	; 0x44
 800393e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
 8003944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394c:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003954:	63ba      	str	r2, [r7, #56]	; 0x38
 8003956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003958:	fa92 f2a2 	rbit	r2, r2
 800395c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800395e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003960:	fab2 f282 	clz	r2, r2
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	f042 0220 	orr.w	r2, r2, #32
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	f002 021f 	and.w	r2, r2, #31
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d13a      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b2      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
 8003980:	2302      	movs	r3, #2
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d102      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x1a0>
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	e00d      	b.n	80039c4 <HAL_RCC_ClockConfig+0x1bc>
 80039a8:	2302      	movs	r3, #2
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	2302      	movs	r3, #2
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2202      	movs	r2, #2
 80039c6:	61ba      	str	r2, [r7, #24]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	fa92 f2a2 	rbit	r2, r2
 80039ce:	617a      	str	r2, [r7, #20]
  return result;
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	fab2 f282 	clz	r2, r2
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	f042 0220 	orr.w	r2, r2, #32
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	f002 021f 	and.w	r2, r2, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e079      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	491a      	ldr	r1, [pc, #104]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fd fd0e 	bl	8001424 <HAL_GetTick>
 8003a08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fd fd0a 	bl	8001424 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e061      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d214      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	4906      	ldr	r1, [pc, #24]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e040      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	491a      	ldr	r1, [pc, #104]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4912      	ldr	r1, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003aaa:	f000 f829 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003aae:	4601      	mov	r1, r0
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab8:	22f0      	movs	r2, #240	; 0xf0
 8003aba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	fa92 f2a2 	rbit	r2, r2
 8003ac2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	fab2 f282 	clz	r2, r2
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	40d3      	lsrs	r3, r2
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x2ec>)
 8003ad0:	5cd3      	ldrb	r3, [r2, r3]
 8003ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <HAL_RCC_ClockConfig+0x2f0>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_RCC_ClockConfig+0x2f4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd fc5c 	bl	800139c <HAL_InitTick>
  
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3778      	adds	r7, #120	; 0x78
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08006548 	.word	0x08006548
 8003af8:	20000044 	.word	0x20000044
 8003afc:	20000048 	.word	0x20000048

08003b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b08b      	sub	sp, #44	; 0x2c
 8003b04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b1a:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x30>
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x36>
 8003b2e:	e03c      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b32:	623b      	str	r3, [r7, #32]
      break;
 8003b34:	e03c      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b40:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	607a      	str	r2, [r7, #4]
  return result;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	40d3      	lsrs	r3, r2
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	220f      	movs	r2, #15
 8003b64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	fa92 f2a2 	rbit	r2, r2
 8003b6c:	60fa      	str	r2, [r7, #12]
  return result;
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	fab2 f282 	clz	r2, r2
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	40d3      	lsrs	r3, r2
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b7a:	5cd3      	ldrb	r3, [r2, r3]
 8003b7c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b88:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	e004      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	623b      	str	r3, [r7, #32]
      break;
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bac:	623b      	str	r3, [r7, #32]
      break;
 8003bae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	372c      	adds	r7, #44	; 0x2c
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	007a1200 	.word	0x007a1200
 8003bc8:	08006558 	.word	0x08006558
 8003bcc:	08006568 	.word	0x08006568
 8003bd0:	003d0900 	.word	0x003d0900

08003bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b092      	sub	sp, #72	; 0x48
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80d4 	beq.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf8:	4b4e      	ldr	r3, [pc, #312]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10e      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c04:	4b4b      	ldr	r3, [pc, #300]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a4a      	ldr	r2, [pc, #296]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
 8003c10:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b45      	ldr	r3, [pc, #276]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a41      	ldr	r2, [pc, #260]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fd fbf3 	bl	8001424 <HAL_GetTick>
 8003c3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fd fbef 	bl	8001424 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e169      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b38      	ldr	r3, [pc, #224]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c60:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8084 	beq.w	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d07c      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2301      	movs	r3, #1
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cd2:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d04b      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fd fb9f 	bl	8001424 <HAL_GetTick>
 8003ce6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fd fb9b 	bl	8001424 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e113      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d00:	2302      	movs	r3, #2
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	61fb      	str	r3, [r7, #28]
  return result;
 8003d18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d2e:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	e00d      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	10908100 	.word	0x10908100
 8003d40:	2302      	movs	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	4b78      	ldr	r3, [pc, #480]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	2202      	movs	r2, #2
 8003d52:	613a      	str	r2, [r7, #16]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	fa92 f2a2 	rbit	r2, r2
 8003d5a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0b7      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d7a:	4b6d      	ldr	r3, [pc, #436]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	496a      	ldr	r1, [pc, #424]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d94:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	4a65      	ldr	r2, [pc, #404]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dac:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	495d      	ldr	r1, [pc, #372]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dca:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4956      	ldr	r1, [pc, #344]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de8:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	494e      	ldr	r1, [pc, #312]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e06:	4b4a      	ldr	r3, [pc, #296]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f023 0210 	bic.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4947      	ldr	r1, [pc, #284]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e24:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	493f      	ldr	r1, [pc, #252]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e42:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f023 0220 	bic.w	r2, r3, #32
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4938      	ldr	r1, [pc, #224]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e60:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4930      	ldr	r1, [pc, #192]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	4929      	ldr	r1, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e9c:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	4921      	ldr	r1, [pc, #132]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	491a      	ldr	r1, [pc, #104]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	4912      	ldr	r1, [pc, #72]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	490b      	ldr	r1, [pc, #44]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3748      	adds	r7, #72	; 0x48
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e09d      	b.n	8004082 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d108      	bne.n	8003f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f56:	d009      	beq.n	8003f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
 8003f5e:	e005      	b.n	8003f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f816 	bl	8000fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fac:	d902      	bls.n	8003fb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e002      	b.n	8003fba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fc2:	d007      	beq.n	8003fd4 <HAL_SPI_Init+0xa0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	ea42 0103 	orr.w	r1, r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	f003 0204 	and.w	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004050:	ea42 0103 	orr.w	r1, r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e049      	b.n	8004130 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fc ffc3 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f000 ff37 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e049      	b.n	80041de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc ffb8 	bl	80010d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 fee0 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_TIM_PWM_Start+0x24>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e03c      	b.n	8004286 <HAL_TIM_PWM_Start+0x9e>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b04      	cmp	r3, #4
 8004210:	d109      	bne.n	8004226 <HAL_TIM_PWM_Start+0x3e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e02f      	b.n	8004286 <HAL_TIM_PWM_Start+0x9e>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d109      	bne.n	8004240 <HAL_TIM_PWM_Start+0x58>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e022      	b.n	8004286 <HAL_TIM_PWM_Start+0x9e>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d109      	bne.n	800425a <HAL_TIM_PWM_Start+0x72>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e015      	b.n	8004286 <HAL_TIM_PWM_Start+0x9e>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b10      	cmp	r3, #16
 800425e:	d109      	bne.n	8004274 <HAL_TIM_PWM_Start+0x8c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e008      	b.n	8004286 <HAL_TIM_PWM_Start+0x9e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e097      	b.n	80043be <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xb6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429c:	e023      	b.n	80042e6 <HAL_TIM_PWM_Start+0xfe>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xc6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ac:	e01b      	b.n	80042e6 <HAL_TIM_PWM_Start+0xfe>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xd6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042bc:	e013      	b.n	80042e6 <HAL_TIM_PWM_Start+0xfe>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xe6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042cc:	e00b      	b.n	80042e6 <HAL_TIM_PWM_Start+0xfe>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0xf6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042dc:	e003      	b.n	80042e6 <HAL_TIM_PWM_Start+0xfe>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2201      	movs	r2, #1
 80042ec:	6839      	ldr	r1, [r7, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 fb42 	bl	8005978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a33      	ldr	r2, [pc, #204]	; (80043c8 <HAL_TIM_PWM_Start+0x1e0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_TIM_PWM_Start+0x13e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a32      	ldr	r2, [pc, #200]	; (80043cc <HAL_TIM_PWM_Start+0x1e4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIM_PWM_Start+0x13e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a30      	ldr	r2, [pc, #192]	; (80043d0 <HAL_TIM_PWM_Start+0x1e8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_TIM_PWM_Start+0x13e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2f      	ldr	r2, [pc, #188]	; (80043d4 <HAL_TIM_PWM_Start+0x1ec>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_PWM_Start+0x13e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <HAL_TIM_PWM_Start+0x1f0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_Start+0x142>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_TIM_PWM_Start+0x144>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800433e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_TIM_PWM_Start+0x1e0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_TIM_PWM_Start+0x194>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d013      	beq.n	800437c <HAL_TIM_PWM_Start+0x194>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a20      	ldr	r2, [pc, #128]	; (80043dc <HAL_TIM_PWM_Start+0x1f4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_TIM_PWM_Start+0x194>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_TIM_PWM_Start+0x194>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a17      	ldr	r2, [pc, #92]	; (80043cc <HAL_TIM_PWM_Start+0x1e4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_PWM_Start+0x194>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <HAL_TIM_PWM_Start+0x1e8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d115      	bne.n	80043a8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_TIM_PWM_Start+0x1fc>)
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d015      	beq.n	80043ba <HAL_TIM_PWM_Start+0x1d2>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d011      	beq.n	80043ba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	e008      	b.n	80043ba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e000      	b.n	80043bc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40013400 	.word	0x40013400
 80043d0:	40014000 	.word	0x40014000
 80043d4:	40014400 	.word	0x40014400
 80043d8:	40014800 	.word	0x40014800
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	00010007 	.word	0x00010007

080043e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e049      	b.n	800448e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f841 	bl	8004496 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f000 fd88 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <HAL_TIM_IC_Start_IT+0x1e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e023      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x66>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d104      	bne.n	80044da <HAL_TIM_IC_Start_IT+0x2e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e01b      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x66>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d104      	bne.n	80044ea <HAL_TIM_IC_Start_IT+0x3e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e013      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x66>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_IC_Start_IT+0x4e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e00b      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x66>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d104      	bne.n	800450a <HAL_TIM_IC_Start_IT+0x5e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e003      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x66>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004510:	b2db      	uxtb	r3, r3
 8004512:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_TIM_IC_Start_IT+0x78>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e013      	b.n	800454c <HAL_TIM_IC_Start_IT+0xa0>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b04      	cmp	r3, #4
 8004528:	d104      	bne.n	8004534 <HAL_TIM_IC_Start_IT+0x88>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004530:	b2db      	uxtb	r3, r3
 8004532:	e00b      	b.n	800454c <HAL_TIM_IC_Start_IT+0xa0>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b08      	cmp	r3, #8
 8004538:	d104      	bne.n	8004544 <HAL_TIM_IC_Start_IT+0x98>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e003      	b.n	800454c <HAL_TIM_IC_Start_IT+0xa0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800454a:	b2db      	uxtb	r3, r3
 800454c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800454e:	7bbb      	ldrb	r3, [r7, #14]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d102      	bne.n	800455a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004554:	7b7b      	ldrb	r3, [r7, #13]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e0d8      	b.n	8004710 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_TIM_IC_Start_IT+0xc2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	e023      	b.n	80045b6 <HAL_TIM_IC_Start_IT+0x10a>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d104      	bne.n	800457e <HAL_TIM_IC_Start_IT+0xd2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	e01b      	b.n	80045b6 <HAL_TIM_IC_Start_IT+0x10a>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d104      	bne.n	800458e <HAL_TIM_IC_Start_IT+0xe2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	e013      	b.n	80045b6 <HAL_TIM_IC_Start_IT+0x10a>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d104      	bne.n	800459e <HAL_TIM_IC_Start_IT+0xf2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800459c:	e00b      	b.n	80045b6 <HAL_TIM_IC_Start_IT+0x10a>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_IC_Start_IT+0x102>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ac:	e003      	b.n	80045b6 <HAL_TIM_IC_Start_IT+0x10a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0x11a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	e013      	b.n	80045ee <HAL_TIM_IC_Start_IT+0x142>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_IC_Start_IT+0x12a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d4:	e00b      	b.n	80045ee <HAL_TIM_IC_Start_IT+0x142>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_IC_Start_IT+0x13a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045e4:	e003      	b.n	80045ee <HAL_TIM_IC_Start_IT+0x142>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b0c      	cmp	r3, #12
 80045f2:	d841      	bhi.n	8004678 <HAL_TIM_IC_Start_IT+0x1cc>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <HAL_TIM_IC_Start_IT+0x150>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004679 	.word	0x08004679
 8004604:	08004679 	.word	0x08004679
 8004608:	08004679 	.word	0x08004679
 800460c:	08004643 	.word	0x08004643
 8004610:	08004679 	.word	0x08004679
 8004614:	08004679 	.word	0x08004679
 8004618:	08004679 	.word	0x08004679
 800461c:	08004655 	.word	0x08004655
 8004620:	08004679 	.word	0x08004679
 8004624:	08004679 	.word	0x08004679
 8004628:	08004679 	.word	0x08004679
 800462c:	08004667 	.word	0x08004667
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0202 	orr.w	r2, r2, #2
 800463e:	60da      	str	r2, [r3, #12]
      break;
 8004640:	e01d      	b.n	800467e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0204 	orr.w	r2, r2, #4
 8004650:	60da      	str	r2, [r3, #12]
      break;
 8004652:	e014      	b.n	800467e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0208 	orr.w	r2, r2, #8
 8004662:	60da      	str	r2, [r3, #12]
      break;
 8004664:	e00b      	b.n	800467e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0210 	orr.w	r2, r2, #16
 8004674:	60da      	str	r2, [r3, #12]
      break;
 8004676:	e002      	b.n	800467e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	bf00      	nop
  }

  if (status == HAL_OK)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d144      	bne.n	800470e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2201      	movs	r2, #1
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f001 f973 	bl	8005978 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a20      	ldr	r2, [pc, #128]	; (8004718 <HAL_TIM_IC_Start_IT+0x26c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_TIM_IC_Start_IT+0x222>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a4:	d013      	beq.n	80046ce <HAL_TIM_IC_Start_IT+0x222>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1c      	ldr	r2, [pc, #112]	; (800471c <HAL_TIM_IC_Start_IT+0x270>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_TIM_IC_Start_IT+0x222>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_TIM_IC_Start_IT+0x274>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_TIM_IC_Start_IT+0x222>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a19      	ldr	r2, [pc, #100]	; (8004724 <HAL_TIM_IC_Start_IT+0x278>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_TIM_IC_Start_IT+0x222>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <HAL_TIM_IC_Start_IT+0x27c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d115      	bne.n	80046fa <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <HAL_TIM_IC_Start_IT+0x280>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d015      	beq.n	800470c <HAL_TIM_IC_Start_IT+0x260>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e6:	d011      	beq.n	800470c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f8:	e008      	b.n	800470c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e000      	b.n	800470e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40013400 	.word	0x40013400
 8004728:	40014000 	.word	0x40014000
 800472c:	00010007 	.word	0x00010007

08004730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0202 	mvn.w	r2, #2
 800475c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fb feb4 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fbc0 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fbc7 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0204 	mvn.w	r2, #4
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fb fe8a 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fb96 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb9d 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0208 	mvn.w	r2, #8
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fb fe60 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fb6c 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fb73 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b10      	cmp	r3, #16
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0210 	mvn.w	r2, #16
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2208      	movs	r2, #8
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fb fe36 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fb42 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb49 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10e      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d107      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0201 	mvn.w	r2, #1
 80048ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb1c 	bl	8004eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b80      	cmp	r3, #128	; 0x80
 80048c0:	d10e      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d107      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 f8fc 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ee:	d10e      	bne.n	800490e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d107      	bne.n	800490e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f001 f8ef 	bl	8005aec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d10e      	bne.n	800493a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d107      	bne.n	800493a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 faf7 	bl	8004f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b20      	cmp	r3, #32
 8004946:	d10e      	bne.n	8004966 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b20      	cmp	r3, #32
 8004954:	d107      	bne.n	8004966 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f06f 0220 	mvn.w	r2, #32
 800495e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f001 f8af 	bl	8005ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004988:	2302      	movs	r3, #2
 800498a:	e088      	b.n	8004a9e <HAL_TIM_IC_ConfigChannel+0x130>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11b      	bne.n	80049d2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80049aa:	f000 fe2d 	bl	8005608 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 020c 	bic.w	r2, r2, #12
 80049bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6999      	ldr	r1, [r3, #24]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	619a      	str	r2, [r3, #24]
 80049d0:	e060      	b.n	8004a94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d11c      	bne.n	8004a12 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80049e8:	f000 fea5 	bl	8005736 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6999      	ldr	r1, [r3, #24]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	619a      	str	r2, [r3, #24]
 8004a10:	e040      	b.n	8004a94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004a28:	f000 fef2 	bl	8005810 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 020c 	bic.w	r2, r2, #12
 8004a3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69d9      	ldr	r1, [r3, #28]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	61da      	str	r2, [r3, #28]
 8004a4e:	e021      	b.n	8004a94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b0c      	cmp	r3, #12
 8004a54:	d11c      	bne.n	8004a90 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004a66:	f000 ff0f 	bl	8005888 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69d9      	ldr	r1, [r3, #28]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	021a      	lsls	r2, r3, #8
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	61da      	str	r2, [r3, #28]
 8004a8e:	e001      	b.n	8004a94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0ff      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b14      	cmp	r3, #20
 8004ad2:	f200 80f0 	bhi.w	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004cb7 	.word	0x08004cb7
 8004ae4:	08004cb7 	.word	0x08004cb7
 8004ae8:	08004cb7 	.word	0x08004cb7
 8004aec:	08004b71 	.word	0x08004b71
 8004af0:	08004cb7 	.word	0x08004cb7
 8004af4:	08004cb7 	.word	0x08004cb7
 8004af8:	08004cb7 	.word	0x08004cb7
 8004afc:	08004bb3 	.word	0x08004bb3
 8004b00:	08004cb7 	.word	0x08004cb7
 8004b04:	08004cb7 	.word	0x08004cb7
 8004b08:	08004cb7 	.word	0x08004cb7
 8004b0c:	08004bf3 	.word	0x08004bf3
 8004b10:	08004cb7 	.word	0x08004cb7
 8004b14:	08004cb7 	.word	0x08004cb7
 8004b18:	08004cb7 	.word	0x08004cb7
 8004b1c:	08004c35 	.word	0x08004c35
 8004b20:	08004cb7 	.word	0x08004cb7
 8004b24:	08004cb7 	.word	0x08004cb7
 8004b28:	08004cb7 	.word	0x08004cb7
 8004b2c:	08004c75 	.word	0x08004c75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fa90 	bl	800505c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6999      	ldr	r1, [r3, #24]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	619a      	str	r2, [r3, #24]
      break;
 8004b6e:	e0a5      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb00 	bl	800517c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	619a      	str	r2, [r3, #24]
      break;
 8004bb0:	e084      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fb69 	bl	8005290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0208 	orr.w	r2, r2, #8
 8004bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0204 	bic.w	r2, r2, #4
 8004bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69d9      	ldr	r1, [r3, #28]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	61da      	str	r2, [r3, #28]
      break;
 8004bf0:	e064      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fbd1 	bl	80053a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	021a      	lsls	r2, r3, #8
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	61da      	str	r2, [r3, #28]
      break;
 8004c32:	e043      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fc1a 	bl	8005474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0208 	orr.w	r2, r2, #8
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c72:	e023      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc5e 	bl	800553c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	021a      	lsls	r2, r3, #8
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb4:	e002      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop

08004cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_TIM_ConfigClockSource+0x1c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0b6      	b.n	8004e5a <HAL_TIM_ConfigClockSource+0x18a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d28:	d03e      	beq.n	8004da8 <HAL_TIM_ConfigClockSource+0xd8>
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	f200 8087 	bhi.w	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	f000 8086 	beq.w	8004e46 <HAL_TIM_ConfigClockSource+0x176>
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	d87f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d40:	2b70      	cmp	r3, #112	; 0x70
 8004d42:	d01a      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xaa>
 8004d44:	2b70      	cmp	r3, #112	; 0x70
 8004d46:	d87b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d48:	2b60      	cmp	r3, #96	; 0x60
 8004d4a:	d050      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x11e>
 8004d4c:	2b60      	cmp	r3, #96	; 0x60
 8004d4e:	d877      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d50:	2b50      	cmp	r3, #80	; 0x50
 8004d52:	d03c      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xfe>
 8004d54:	2b50      	cmp	r3, #80	; 0x50
 8004d56:	d873      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d058      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x13e>
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d86f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d60:	2b30      	cmp	r3, #48	; 0x30
 8004d62:	d064      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d86b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d060      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d867      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05c      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d05a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d78:	e062      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d8a:	f000 fdd5 	bl	8005938 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	609a      	str	r2, [r3, #8]
      break;
 8004da6:	e04f      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db8:	f000 fdbe 	bl	8005938 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dca:	609a      	str	r2, [r3, #8]
      break;
 8004dcc:	e03c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fc7c 	bl	80056d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2150      	movs	r1, #80	; 0x50
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fd8b 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 8004dec:	e02c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fcd8 	bl	80057b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2160      	movs	r1, #96	; 0x60
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fd7b 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e01c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fc5c 	bl	80056d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd6b 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e00c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f000 fd62 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 8004e3e:	e003      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d831      	bhi.n	8004edc <HAL_TIM_ReadCapturedValue+0x78>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004eb5 	.word	0x08004eb5
 8004e84:	08004edd 	.word	0x08004edd
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004edd 	.word	0x08004edd
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004edd 	.word	0x08004edd
 8004e98:	08004edd 	.word	0x08004edd
 8004e9c:	08004edd 	.word	0x08004edd
 8004ea0:	08004ec9 	.word	0x08004ec9
 8004ea4:	08004edd 	.word	0x08004edd
 8004ea8:	08004edd 	.word	0x08004edd
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004ed3 	.word	0x08004ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	60fb      	str	r3, [r7, #12]

      break;
 8004ebc:	e00f      	b.n	8004ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	60fb      	str	r3, [r7, #12]

      break;
 8004ec6:	e00a      	b.n	8004ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	60fb      	str	r3, [r7, #12]

      break;
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	60fb      	str	r3, [r7, #12]

      break;
 8004eda:	e000      	b.n	8004ede <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004edc:	bf00      	nop
  }

  return tmpreg;
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <TIM_Base_SetConfig+0x104>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00f      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d00b      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a39      	ldr	r2, [pc, #228]	; (8005044 <TIM_Base_SetConfig+0x108>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a38      	ldr	r2, [pc, #224]	; (8005048 <TIM_Base_SetConfig+0x10c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a37      	ldr	r2, [pc, #220]	; (800504c <TIM_Base_SetConfig+0x110>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2d      	ldr	r2, [pc, #180]	; (8005040 <TIM_Base_SetConfig+0x104>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01b      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d017      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <TIM_Base_SetConfig+0x108>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	; (8005048 <TIM_Base_SetConfig+0x10c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_Base_SetConfig+0x110>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_Base_SetConfig+0x114>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a26      	ldr	r2, [pc, #152]	; (8005054 <TIM_Base_SetConfig+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a25      	ldr	r2, [pc, #148]	; (8005058 <TIM_Base_SetConfig+0x11c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d108      	bne.n	8004fd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a10      	ldr	r2, [pc, #64]	; (8005040 <TIM_Base_SetConfig+0x104>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <TIM_Base_SetConfig+0x110>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a10      	ldr	r2, [pc, #64]	; (8005050 <TIM_Base_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0f      	ldr	r2, [pc, #60]	; (8005054 <TIM_Base_SetConfig+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a0e      	ldr	r2, [pc, #56]	; (8005058 <TIM_Base_SetConfig+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d103      	bne.n	800502c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	615a      	str	r2, [r3, #20]
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40013400 	.word	0x40013400
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 0302 	bic.w	r3, r3, #2
 80050a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <TIM_OC1_SetConfig+0x10c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00f      	beq.n	80050dc <TIM_OC1_SetConfig+0x80>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a2b      	ldr	r2, [pc, #172]	; (800516c <TIM_OC1_SetConfig+0x110>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_OC1_SetConfig+0x80>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <TIM_OC1_SetConfig+0x114>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_OC1_SetConfig+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a29      	ldr	r2, [pc, #164]	; (8005174 <TIM_OC1_SetConfig+0x118>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC1_SetConfig+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a28      	ldr	r2, [pc, #160]	; (8005178 <TIM_OC1_SetConfig+0x11c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10c      	bne.n	80050f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0308 	bic.w	r3, r3, #8
 80050e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <TIM_OC1_SetConfig+0x10c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00f      	beq.n	800511e <TIM_OC1_SetConfig+0xc2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1a      	ldr	r2, [pc, #104]	; (800516c <TIM_OC1_SetConfig+0x110>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_OC1_SetConfig+0xc2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <TIM_OC1_SetConfig+0x114>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_OC1_SetConfig+0xc2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <TIM_OC1_SetConfig+0x118>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_OC1_SetConfig+0xc2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a17      	ldr	r2, [pc, #92]	; (8005178 <TIM_OC1_SetConfig+0x11c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d111      	bne.n	8005142 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	621a      	str	r2, [r3, #32]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40014000 	.word	0x40014000
 8005174:	40014400 	.word	0x40014400
 8005178:	40014800 	.word	0x40014800

0800517c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f023 0210 	bic.w	r2, r3, #16
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0320 	bic.w	r3, r3, #32
 80051ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a28      	ldr	r2, [pc, #160]	; (800527c <TIM_OC2_SetConfig+0x100>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_OC2_SetConfig+0x6c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a27      	ldr	r2, [pc, #156]	; (8005280 <TIM_OC2_SetConfig+0x104>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10d      	bne.n	8005204 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a1d      	ldr	r2, [pc, #116]	; (800527c <TIM_OC2_SetConfig+0x100>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00f      	beq.n	800522c <TIM_OC2_SetConfig+0xb0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <TIM_OC2_SetConfig+0x104>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_OC2_SetConfig+0xb0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <TIM_OC2_SetConfig+0x108>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_OC2_SetConfig+0xb0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <TIM_OC2_SetConfig+0x10c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC2_SetConfig+0xb0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a19      	ldr	r2, [pc, #100]	; (800528c <TIM_OC2_SetConfig+0x110>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d113      	bne.n	8005254 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005232:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800523a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a27      	ldr	r2, [pc, #156]	; (800538c <TIM_OC3_SetConfig+0xfc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_OC3_SetConfig+0x6a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a26      	ldr	r2, [pc, #152]	; (8005390 <TIM_OC3_SetConfig+0x100>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d10d      	bne.n	8005316 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005314:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1c      	ldr	r2, [pc, #112]	; (800538c <TIM_OC3_SetConfig+0xfc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_OC3_SetConfig+0xae>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <TIM_OC3_SetConfig+0x100>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_OC3_SetConfig+0xae>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <TIM_OC3_SetConfig+0x104>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_OC3_SetConfig+0xae>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <TIM_OC3_SetConfig+0x108>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC3_SetConfig+0xae>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a18      	ldr	r2, [pc, #96]	; (800539c <TIM_OC3_SetConfig+0x10c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d113      	bne.n	8005366 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	621a      	str	r2, [r3, #32]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40013400 	.word	0x40013400
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800

080053a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	031b      	lsls	r3, r3, #12
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a18      	ldr	r2, [pc, #96]	; (8005460 <TIM_OC4_SetConfig+0xc0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00f      	beq.n	8005424 <TIM_OC4_SetConfig+0x84>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a17      	ldr	r2, [pc, #92]	; (8005464 <TIM_OC4_SetConfig+0xc4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00b      	beq.n	8005424 <TIM_OC4_SetConfig+0x84>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a16      	ldr	r2, [pc, #88]	; (8005468 <TIM_OC4_SetConfig+0xc8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_OC4_SetConfig+0x84>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a15      	ldr	r2, [pc, #84]	; (800546c <TIM_OC4_SetConfig+0xcc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC4_SetConfig+0x84>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <TIM_OC4_SetConfig+0xd0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d109      	bne.n	8005438 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a17      	ldr	r2, [pc, #92]	; (8005528 <TIM_OC5_SetConfig+0xb4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00f      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a16      	ldr	r2, [pc, #88]	; (800552c <TIM_OC5_SetConfig+0xb8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00b      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <TIM_OC5_SetConfig+0xbc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d007      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <TIM_OC5_SetConfig+0xc0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d003      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <TIM_OC5_SetConfig+0xc4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d109      	bne.n	8005502 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	621a      	str	r2, [r3, #32]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800

0800553c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	051b      	lsls	r3, r3, #20
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <TIM_OC6_SetConfig+0xb8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00f      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <TIM_OC6_SetConfig+0xbc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00b      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a16      	ldr	r2, [pc, #88]	; (80055fc <TIM_OC6_SetConfig+0xc0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <TIM_OC6_SetConfig+0xc4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a14      	ldr	r2, [pc, #80]	; (8005604 <TIM_OC6_SetConfig+0xc8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d109      	bne.n	80055cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	029b      	lsls	r3, r3, #10
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <TIM_TI1_SetConfig+0xbc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_TI1_SetConfig+0x56>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d00f      	beq.n	800565e <TIM_TI1_SetConfig+0x56>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <TIM_TI1_SetConfig+0xc0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_TI1_SetConfig+0x56>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a20      	ldr	r2, [pc, #128]	; (80056cc <TIM_TI1_SetConfig+0xc4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_TI1_SetConfig+0x56>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <TIM_TI1_SetConfig+0xc8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_TI1_SetConfig+0x56>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <TIM_TI1_SetConfig+0xcc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d101      	bne.n	8005662 <TIM_TI1_SetConfig+0x5a>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <TIM_TI1_SetConfig+0x5c>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e003      	b.n	8005682 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	b2db      	uxtb	r3, r3
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f023 030a 	bic.w	r3, r3, #10
 800569c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f003 030a 	and.w	r3, r3, #10
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40013400 	.word	0x40013400
 80056d4:	40014000 	.word	0x40014000

080056d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0201 	bic.w	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f023 030a 	bic.w	r3, r3, #10
 8005714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005736:	b480      	push	{r7}
 8005738:	b087      	sub	sp, #28
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f023 0210 	bic.w	r2, r3, #16
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005762:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	031b      	lsls	r3, r3, #12
 800577a:	b29b      	uxth	r3, r3
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005788:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	621a      	str	r2, [r3, #32]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f023 0210 	bic.w	r2, r3, #16
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	031b      	lsls	r3, r3, #12
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	621a      	str	r2, [r3, #32]
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 0303 	bic.w	r3, r3, #3
 800583c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	b2db      	uxtb	r3, r3
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005860:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	031b      	lsls	r3, r3, #12
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80058da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	031b      	lsls	r3, r3, #12
 80058e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	f043 0307 	orr.w	r3, r3, #7
 8005924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	431a      	orrs	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2201      	movs	r2, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	43db      	mvns	r3, r3
 800599a:	401a      	ands	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e063      	b.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2b      	ldr	r2, [pc, #172]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2a      	ldr	r2, [pc, #168]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d018      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4e:	d013      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a17      	ldr	r2, [pc, #92]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a12      	ldr	r2, [pc, #72]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10c      	bne.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40013400 	.word	0x40013400
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	40014000 	.word	0x40014000

08005ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	4013      	ands	r3, r2
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b36:	b084      	sub	sp, #16
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	f107 0014 	add.w	r0, r7, #20
 8005b44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	b004      	add	sp, #16
 8005b76:	4770      	bx	lr

08005b78 <siprintf>:
 8005b78:	b40e      	push	{r1, r2, r3}
 8005b7a:	b500      	push	{lr}
 8005b7c:	b09c      	sub	sp, #112	; 0x70
 8005b7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b80:	9002      	str	r0, [sp, #8]
 8005b82:	9006      	str	r0, [sp, #24]
 8005b84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b88:	4809      	ldr	r0, [pc, #36]	; (8005bb0 <siprintf+0x38>)
 8005b8a:	9107      	str	r1, [sp, #28]
 8005b8c:	9104      	str	r1, [sp, #16]
 8005b8e:	4909      	ldr	r1, [pc, #36]	; (8005bb4 <siprintf+0x3c>)
 8005b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b94:	9105      	str	r1, [sp, #20]
 8005b96:	6800      	ldr	r0, [r0, #0]
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	a902      	add	r1, sp, #8
 8005b9c:	f000 f8a8 	bl	8005cf0 <_svfiprintf_r>
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	b01c      	add	sp, #112	; 0x70
 8005ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bac:	b003      	add	sp, #12
 8005bae:	4770      	bx	lr
 8005bb0:	2000009c 	.word	0x2000009c
 8005bb4:	ffff0208 	.word	0xffff0208

08005bb8 <memset>:
 8005bb8:	4402      	add	r2, r0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <__errno>:
 8005bc8:	4b01      	ldr	r3, [pc, #4]	; (8005bd0 <__errno+0x8>)
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	2000009c 	.word	0x2000009c

08005bd4 <__libc_init_array>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4d0d      	ldr	r5, [pc, #52]	; (8005c0c <__libc_init_array+0x38>)
 8005bd8:	4c0d      	ldr	r4, [pc, #52]	; (8005c10 <__libc_init_array+0x3c>)
 8005bda:	1b64      	subs	r4, r4, r5
 8005bdc:	10a4      	asrs	r4, r4, #2
 8005bde:	2600      	movs	r6, #0
 8005be0:	42a6      	cmp	r6, r4
 8005be2:	d109      	bne.n	8005bf8 <__libc_init_array+0x24>
 8005be4:	4d0b      	ldr	r5, [pc, #44]	; (8005c14 <__libc_init_array+0x40>)
 8005be6:	4c0c      	ldr	r4, [pc, #48]	; (8005c18 <__libc_init_array+0x44>)
 8005be8:	f000 fc6a 	bl	80064c0 <_init>
 8005bec:	1b64      	subs	r4, r4, r5
 8005bee:	10a4      	asrs	r4, r4, #2
 8005bf0:	2600      	movs	r6, #0
 8005bf2:	42a6      	cmp	r6, r4
 8005bf4:	d105      	bne.n	8005c02 <__libc_init_array+0x2e>
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfc:	4798      	blx	r3
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7ee      	b.n	8005be0 <__libc_init_array+0xc>
 8005c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c06:	4798      	blx	r3
 8005c08:	3601      	adds	r6, #1
 8005c0a:	e7f2      	b.n	8005bf2 <__libc_init_array+0x1e>
 8005c0c:	080065ac 	.word	0x080065ac
 8005c10:	080065ac 	.word	0x080065ac
 8005c14:	080065ac 	.word	0x080065ac
 8005c18:	080065b0 	.word	0x080065b0

08005c1c <__retarget_lock_acquire_recursive>:
 8005c1c:	4770      	bx	lr

08005c1e <__retarget_lock_release_recursive>:
 8005c1e:	4770      	bx	lr

08005c20 <memcpy>:
 8005c20:	440a      	add	r2, r1
 8005c22:	4291      	cmp	r1, r2
 8005c24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c28:	d100      	bne.n	8005c2c <memcpy+0xc>
 8005c2a:	4770      	bx	lr
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c36:	4291      	cmp	r1, r2
 8005c38:	d1f9      	bne.n	8005c2e <memcpy+0xe>
 8005c3a:	bd10      	pop	{r4, pc}

08005c3c <__ssputs_r>:
 8005c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	688e      	ldr	r6, [r1, #8]
 8005c42:	461f      	mov	r7, r3
 8005c44:	42be      	cmp	r6, r7
 8005c46:	680b      	ldr	r3, [r1, #0]
 8005c48:	4682      	mov	sl, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	d82c      	bhi.n	8005caa <__ssputs_r+0x6e>
 8005c50:	898a      	ldrh	r2, [r1, #12]
 8005c52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c56:	d026      	beq.n	8005ca6 <__ssputs_r+0x6a>
 8005c58:	6965      	ldr	r5, [r4, #20]
 8005c5a:	6909      	ldr	r1, [r1, #16]
 8005c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c60:	eba3 0901 	sub.w	r9, r3, r1
 8005c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c68:	1c7b      	adds	r3, r7, #1
 8005c6a:	444b      	add	r3, r9
 8005c6c:	106d      	asrs	r5, r5, #1
 8005c6e:	429d      	cmp	r5, r3
 8005c70:	bf38      	it	cc
 8005c72:	461d      	movcc	r5, r3
 8005c74:	0553      	lsls	r3, r2, #21
 8005c76:	d527      	bpl.n	8005cc8 <__ssputs_r+0x8c>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f000 f957 	bl	8005f2c <_malloc_r>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	b360      	cbz	r0, 8005cdc <__ssputs_r+0xa0>
 8005c82:	6921      	ldr	r1, [r4, #16]
 8005c84:	464a      	mov	r2, r9
 8005c86:	f7ff ffcb 	bl	8005c20 <memcpy>
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	6126      	str	r6, [r4, #16]
 8005c98:	6165      	str	r5, [r4, #20]
 8005c9a:	444e      	add	r6, r9
 8005c9c:	eba5 0509 	sub.w	r5, r5, r9
 8005ca0:	6026      	str	r6, [r4, #0]
 8005ca2:	60a5      	str	r5, [r4, #8]
 8005ca4:	463e      	mov	r6, r7
 8005ca6:	42be      	cmp	r6, r7
 8005ca8:	d900      	bls.n	8005cac <__ssputs_r+0x70>
 8005caa:	463e      	mov	r6, r7
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	4632      	mov	r2, r6
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	f000 fb86 	bl	80063c2 <memmove>
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	1b9b      	subs	r3, r3, r6
 8005cba:	60a3      	str	r3, [r4, #8]
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	4433      	add	r3, r6
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc8:	462a      	mov	r2, r5
 8005cca:	f000 fb4b 	bl	8006364 <_realloc_r>
 8005cce:	4606      	mov	r6, r0
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d1e0      	bne.n	8005c96 <__ssputs_r+0x5a>
 8005cd4:	6921      	ldr	r1, [r4, #16]
 8005cd6:	4650      	mov	r0, sl
 8005cd8:	f000 fb9e 	bl	8006418 <_free_r>
 8005cdc:	230c      	movs	r3, #12
 8005cde:	f8ca 3000 	str.w	r3, [sl]
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cee:	e7e9      	b.n	8005cc4 <__ssputs_r+0x88>

08005cf0 <_svfiprintf_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	898b      	ldrh	r3, [r1, #12]
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	b09d      	sub	sp, #116	; 0x74
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460d      	mov	r5, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	d50e      	bpl.n	8005d22 <_svfiprintf_r+0x32>
 8005d04:	690b      	ldr	r3, [r1, #16]
 8005d06:	b963      	cbnz	r3, 8005d22 <_svfiprintf_r+0x32>
 8005d08:	2140      	movs	r1, #64	; 0x40
 8005d0a:	f000 f90f 	bl	8005f2c <_malloc_r>
 8005d0e:	6028      	str	r0, [r5, #0]
 8005d10:	6128      	str	r0, [r5, #16]
 8005d12:	b920      	cbnz	r0, 8005d1e <_svfiprintf_r+0x2e>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1c:	e0d0      	b.n	8005ec0 <_svfiprintf_r+0x1d0>
 8005d1e:	2340      	movs	r3, #64	; 0x40
 8005d20:	616b      	str	r3, [r5, #20]
 8005d22:	2300      	movs	r3, #0
 8005d24:	9309      	str	r3, [sp, #36]	; 0x24
 8005d26:	2320      	movs	r3, #32
 8005d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d30:	2330      	movs	r3, #48	; 0x30
 8005d32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ed8 <_svfiprintf_r+0x1e8>
 8005d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d3a:	f04f 0901 	mov.w	r9, #1
 8005d3e:	4623      	mov	r3, r4
 8005d40:	469a      	mov	sl, r3
 8005d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d46:	b10a      	cbz	r2, 8005d4c <_svfiprintf_r+0x5c>
 8005d48:	2a25      	cmp	r2, #37	; 0x25
 8005d4a:	d1f9      	bne.n	8005d40 <_svfiprintf_r+0x50>
 8005d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d50:	d00b      	beq.n	8005d6a <_svfiprintf_r+0x7a>
 8005d52:	465b      	mov	r3, fp
 8005d54:	4622      	mov	r2, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	4638      	mov	r0, r7
 8005d5a:	f7ff ff6f 	bl	8005c3c <__ssputs_r>
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f000 80a9 	beq.w	8005eb6 <_svfiprintf_r+0x1c6>
 8005d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d66:	445a      	add	r2, fp
 8005d68:	9209      	str	r2, [sp, #36]	; 0x24
 8005d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80a1 	beq.w	8005eb6 <_svfiprintf_r+0x1c6>
 8005d74:	2300      	movs	r3, #0
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d7e:	f10a 0a01 	add.w	sl, sl, #1
 8005d82:	9304      	str	r3, [sp, #16]
 8005d84:	9307      	str	r3, [sp, #28]
 8005d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d8c:	4654      	mov	r4, sl
 8005d8e:	2205      	movs	r2, #5
 8005d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d94:	4850      	ldr	r0, [pc, #320]	; (8005ed8 <_svfiprintf_r+0x1e8>)
 8005d96:	f7fa fa1b 	bl	80001d0 <memchr>
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	b9d8      	cbnz	r0, 8005dd6 <_svfiprintf_r+0xe6>
 8005d9e:	06d0      	lsls	r0, r2, #27
 8005da0:	bf44      	itt	mi
 8005da2:	2320      	movmi	r3, #32
 8005da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da8:	0711      	lsls	r1, r2, #28
 8005daa:	bf44      	itt	mi
 8005dac:	232b      	movmi	r3, #43	; 0x2b
 8005dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005db2:	f89a 3000 	ldrb.w	r3, [sl]
 8005db6:	2b2a      	cmp	r3, #42	; 0x2a
 8005db8:	d015      	beq.n	8005de6 <_svfiprintf_r+0xf6>
 8005dba:	9a07      	ldr	r2, [sp, #28]
 8005dbc:	4654      	mov	r4, sl
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f04f 0c0a 	mov.w	ip, #10
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dca:	3b30      	subs	r3, #48	; 0x30
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	d94d      	bls.n	8005e6c <_svfiprintf_r+0x17c>
 8005dd0:	b1b0      	cbz	r0, 8005e00 <_svfiprintf_r+0x110>
 8005dd2:	9207      	str	r2, [sp, #28]
 8005dd4:	e014      	b.n	8005e00 <_svfiprintf_r+0x110>
 8005dd6:	eba0 0308 	sub.w	r3, r0, r8
 8005dda:	fa09 f303 	lsl.w	r3, r9, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	9304      	str	r3, [sp, #16]
 8005de2:	46a2      	mov	sl, r4
 8005de4:	e7d2      	b.n	8005d8c <_svfiprintf_r+0x9c>
 8005de6:	9b03      	ldr	r3, [sp, #12]
 8005de8:	1d19      	adds	r1, r3, #4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	9103      	str	r1, [sp, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bfbb      	ittet	lt
 8005df2:	425b      	neglt	r3, r3
 8005df4:	f042 0202 	orrlt.w	r2, r2, #2
 8005df8:	9307      	strge	r3, [sp, #28]
 8005dfa:	9307      	strlt	r3, [sp, #28]
 8005dfc:	bfb8      	it	lt
 8005dfe:	9204      	strlt	r2, [sp, #16]
 8005e00:	7823      	ldrb	r3, [r4, #0]
 8005e02:	2b2e      	cmp	r3, #46	; 0x2e
 8005e04:	d10c      	bne.n	8005e20 <_svfiprintf_r+0x130>
 8005e06:	7863      	ldrb	r3, [r4, #1]
 8005e08:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0a:	d134      	bne.n	8005e76 <_svfiprintf_r+0x186>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	1d1a      	adds	r2, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	9203      	str	r2, [sp, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bfb8      	it	lt
 8005e18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e1c:	3402      	adds	r4, #2
 8005e1e:	9305      	str	r3, [sp, #20]
 8005e20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005ee8 <_svfiprintf_r+0x1f8>
 8005e24:	7821      	ldrb	r1, [r4, #0]
 8005e26:	2203      	movs	r2, #3
 8005e28:	4650      	mov	r0, sl
 8005e2a:	f7fa f9d1 	bl	80001d0 <memchr>
 8005e2e:	b138      	cbz	r0, 8005e40 <_svfiprintf_r+0x150>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	eba0 000a 	sub.w	r0, r0, sl
 8005e36:	2240      	movs	r2, #64	; 0x40
 8005e38:	4082      	lsls	r2, r0
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	3401      	adds	r4, #1
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e44:	4825      	ldr	r0, [pc, #148]	; (8005edc <_svfiprintf_r+0x1ec>)
 8005e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e4a:	2206      	movs	r2, #6
 8005e4c:	f7fa f9c0 	bl	80001d0 <memchr>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d038      	beq.n	8005ec6 <_svfiprintf_r+0x1d6>
 8005e54:	4b22      	ldr	r3, [pc, #136]	; (8005ee0 <_svfiprintf_r+0x1f0>)
 8005e56:	bb1b      	cbnz	r3, 8005ea0 <_svfiprintf_r+0x1b0>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	3307      	adds	r3, #7
 8005e5c:	f023 0307 	bic.w	r3, r3, #7
 8005e60:	3308      	adds	r3, #8
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e66:	4433      	add	r3, r6
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	e768      	b.n	8005d3e <_svfiprintf_r+0x4e>
 8005e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e70:	460c      	mov	r4, r1
 8005e72:	2001      	movs	r0, #1
 8005e74:	e7a6      	b.n	8005dc4 <_svfiprintf_r+0xd4>
 8005e76:	2300      	movs	r3, #0
 8005e78:	3401      	adds	r4, #1
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f04f 0c0a 	mov.w	ip, #10
 8005e82:	4620      	mov	r0, r4
 8005e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e88:	3a30      	subs	r2, #48	; 0x30
 8005e8a:	2a09      	cmp	r2, #9
 8005e8c:	d903      	bls.n	8005e96 <_svfiprintf_r+0x1a6>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0c6      	beq.n	8005e20 <_svfiprintf_r+0x130>
 8005e92:	9105      	str	r1, [sp, #20]
 8005e94:	e7c4      	b.n	8005e20 <_svfiprintf_r+0x130>
 8005e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e7f0      	b.n	8005e82 <_svfiprintf_r+0x192>
 8005ea0:	ab03      	add	r3, sp, #12
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <_svfiprintf_r+0x1f4>)
 8005ea8:	a904      	add	r1, sp, #16
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f3af 8000 	nop.w
 8005eb0:	1c42      	adds	r2, r0, #1
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	d1d6      	bne.n	8005e64 <_svfiprintf_r+0x174>
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	065b      	lsls	r3, r3, #25
 8005eba:	f53f af2d 	bmi.w	8005d18 <_svfiprintf_r+0x28>
 8005ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec0:	b01d      	add	sp, #116	; 0x74
 8005ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec6:	ab03      	add	r3, sp, #12
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <_svfiprintf_r+0x1f4>)
 8005ece:	a904      	add	r1, sp, #16
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f000 f919 	bl	8006108 <_printf_i>
 8005ed6:	e7eb      	b.n	8005eb0 <_svfiprintf_r+0x1c0>
 8005ed8:	08006578 	.word	0x08006578
 8005edc:	08006582 	.word	0x08006582
 8005ee0:	00000000 	.word	0x00000000
 8005ee4:	08005c3d 	.word	0x08005c3d
 8005ee8:	0800657e 	.word	0x0800657e

08005eec <sbrk_aligned>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	4e0e      	ldr	r6, [pc, #56]	; (8005f28 <sbrk_aligned+0x3c>)
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	6831      	ldr	r1, [r6, #0]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	b911      	cbnz	r1, 8005efe <sbrk_aligned+0x12>
 8005ef8:	f000 fa7e 	bl	80063f8 <_sbrk_r>
 8005efc:	6030      	str	r0, [r6, #0]
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 fa79 	bl	80063f8 <_sbrk_r>
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	d00a      	beq.n	8005f20 <sbrk_aligned+0x34>
 8005f0a:	1cc4      	adds	r4, r0, #3
 8005f0c:	f024 0403 	bic.w	r4, r4, #3
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d007      	beq.n	8005f24 <sbrk_aligned+0x38>
 8005f14:	1a21      	subs	r1, r4, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 fa6e 	bl	80063f8 <_sbrk_r>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d101      	bne.n	8005f24 <sbrk_aligned+0x38>
 8005f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f24:	4620      	mov	r0, r4
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	20000650 	.word	0x20000650

08005f2c <_malloc_r>:
 8005f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f30:	1ccd      	adds	r5, r1, #3
 8005f32:	f025 0503 	bic.w	r5, r5, #3
 8005f36:	3508      	adds	r5, #8
 8005f38:	2d0c      	cmp	r5, #12
 8005f3a:	bf38      	it	cc
 8005f3c:	250c      	movcc	r5, #12
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	4607      	mov	r7, r0
 8005f42:	db01      	blt.n	8005f48 <_malloc_r+0x1c>
 8005f44:	42a9      	cmp	r1, r5
 8005f46:	d905      	bls.n	8005f54 <_malloc_r+0x28>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	4630      	mov	r0, r6
 8005f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006028 <_malloc_r+0xfc>
 8005f58:	f000 f9f8 	bl	800634c <__malloc_lock>
 8005f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f60:	461c      	mov	r4, r3
 8005f62:	bb5c      	cbnz	r4, 8005fbc <_malloc_r+0x90>
 8005f64:	4629      	mov	r1, r5
 8005f66:	4638      	mov	r0, r7
 8005f68:	f7ff ffc0 	bl	8005eec <sbrk_aligned>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	4604      	mov	r4, r0
 8005f70:	d155      	bne.n	800601e <_malloc_r+0xf2>
 8005f72:	f8d8 4000 	ldr.w	r4, [r8]
 8005f76:	4626      	mov	r6, r4
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	d145      	bne.n	8006008 <_malloc_r+0xdc>
 8005f7c:	2c00      	cmp	r4, #0
 8005f7e:	d048      	beq.n	8006012 <_malloc_r+0xe6>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	4631      	mov	r1, r6
 8005f84:	4638      	mov	r0, r7
 8005f86:	eb04 0903 	add.w	r9, r4, r3
 8005f8a:	f000 fa35 	bl	80063f8 <_sbrk_r>
 8005f8e:	4581      	cmp	r9, r0
 8005f90:	d13f      	bne.n	8006012 <_malloc_r+0xe6>
 8005f92:	6821      	ldr	r1, [r4, #0]
 8005f94:	1a6d      	subs	r5, r5, r1
 8005f96:	4629      	mov	r1, r5
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f7ff ffa7 	bl	8005eec <sbrk_aligned>
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d037      	beq.n	8006012 <_malloc_r+0xe6>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	442b      	add	r3, r5
 8005fa6:	6023      	str	r3, [r4, #0]
 8005fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d038      	beq.n	8006022 <_malloc_r+0xf6>
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	42a2      	cmp	r2, r4
 8005fb4:	d12b      	bne.n	800600e <_malloc_r+0xe2>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	e00f      	b.n	8005fdc <_malloc_r+0xb0>
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	1b52      	subs	r2, r2, r5
 8005fc0:	d41f      	bmi.n	8006002 <_malloc_r+0xd6>
 8005fc2:	2a0b      	cmp	r2, #11
 8005fc4:	d917      	bls.n	8005ff6 <_malloc_r+0xca>
 8005fc6:	1961      	adds	r1, r4, r5
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	6025      	str	r5, [r4, #0]
 8005fcc:	bf18      	it	ne
 8005fce:	6059      	strne	r1, [r3, #4]
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	bf08      	it	eq
 8005fd4:	f8c8 1000 	streq.w	r1, [r8]
 8005fd8:	5162      	str	r2, [r4, r5]
 8005fda:	604b      	str	r3, [r1, #4]
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f104 060b 	add.w	r6, r4, #11
 8005fe2:	f000 f9b9 	bl	8006358 <__malloc_unlock>
 8005fe6:	f026 0607 	bic.w	r6, r6, #7
 8005fea:	1d23      	adds	r3, r4, #4
 8005fec:	1af2      	subs	r2, r6, r3
 8005fee:	d0ae      	beq.n	8005f4e <_malloc_r+0x22>
 8005ff0:	1b9b      	subs	r3, r3, r6
 8005ff2:	50a3      	str	r3, [r4, r2]
 8005ff4:	e7ab      	b.n	8005f4e <_malloc_r+0x22>
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	6862      	ldr	r2, [r4, #4]
 8005ffa:	d1dd      	bne.n	8005fb8 <_malloc_r+0x8c>
 8005ffc:	f8c8 2000 	str.w	r2, [r8]
 8006000:	e7ec      	b.n	8005fdc <_malloc_r+0xb0>
 8006002:	4623      	mov	r3, r4
 8006004:	6864      	ldr	r4, [r4, #4]
 8006006:	e7ac      	b.n	8005f62 <_malloc_r+0x36>
 8006008:	4634      	mov	r4, r6
 800600a:	6876      	ldr	r6, [r6, #4]
 800600c:	e7b4      	b.n	8005f78 <_malloc_r+0x4c>
 800600e:	4613      	mov	r3, r2
 8006010:	e7cc      	b.n	8005fac <_malloc_r+0x80>
 8006012:	230c      	movs	r3, #12
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	4638      	mov	r0, r7
 8006018:	f000 f99e 	bl	8006358 <__malloc_unlock>
 800601c:	e797      	b.n	8005f4e <_malloc_r+0x22>
 800601e:	6025      	str	r5, [r4, #0]
 8006020:	e7dc      	b.n	8005fdc <_malloc_r+0xb0>
 8006022:	605b      	str	r3, [r3, #4]
 8006024:	deff      	udf	#255	; 0xff
 8006026:	bf00      	nop
 8006028:	2000064c 	.word	0x2000064c

0800602c <_printf_common>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	4616      	mov	r6, r2
 8006032:	4699      	mov	r9, r3
 8006034:	688a      	ldr	r2, [r1, #8]
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800603c:	4293      	cmp	r3, r2
 800603e:	bfb8      	it	lt
 8006040:	4613      	movlt	r3, r2
 8006042:	6033      	str	r3, [r6, #0]
 8006044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006048:	4607      	mov	r7, r0
 800604a:	460c      	mov	r4, r1
 800604c:	b10a      	cbz	r2, 8006052 <_printf_common+0x26>
 800604e:	3301      	adds	r3, #1
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	6833      	ldrmi	r3, [r6, #0]
 800605a:	3302      	addmi	r3, #2
 800605c:	6033      	strmi	r3, [r6, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	f015 0506 	ands.w	r5, r5, #6
 8006064:	d106      	bne.n	8006074 <_printf_common+0x48>
 8006066:	f104 0a19 	add.w	sl, r4, #25
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	6832      	ldr	r2, [r6, #0]
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	dc26      	bgt.n	80060c2 <_printf_common+0x96>
 8006074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006078:	1e13      	subs	r3, r2, #0
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	bf18      	it	ne
 800607e:	2301      	movne	r3, #1
 8006080:	0692      	lsls	r2, r2, #26
 8006082:	d42b      	bmi.n	80060dc <_printf_common+0xb0>
 8006084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006088:	4649      	mov	r1, r9
 800608a:	4638      	mov	r0, r7
 800608c:	47c0      	blx	r8
 800608e:	3001      	adds	r0, #1
 8006090:	d01e      	beq.n	80060d0 <_printf_common+0xa4>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	f003 0306 	and.w	r3, r3, #6
 800609a:	2b04      	cmp	r3, #4
 800609c:	bf02      	ittt	eq
 800609e:	68e5      	ldreq	r5, [r4, #12]
 80060a0:	6833      	ldreq	r3, [r6, #0]
 80060a2:	1aed      	subeq	r5, r5, r3
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	bf0c      	ite	eq
 80060a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060ac:	2500      	movne	r5, #0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	bfc4      	itt	gt
 80060b2:	1a9b      	subgt	r3, r3, r2
 80060b4:	18ed      	addgt	r5, r5, r3
 80060b6:	2600      	movs	r6, #0
 80060b8:	341a      	adds	r4, #26
 80060ba:	42b5      	cmp	r5, r6
 80060bc:	d11a      	bne.n	80060f4 <_printf_common+0xc8>
 80060be:	2000      	movs	r0, #0
 80060c0:	e008      	b.n	80060d4 <_printf_common+0xa8>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4652      	mov	r2, sl
 80060c6:	4649      	mov	r1, r9
 80060c8:	4638      	mov	r0, r7
 80060ca:	47c0      	blx	r8
 80060cc:	3001      	adds	r0, #1
 80060ce:	d103      	bne.n	80060d8 <_printf_common+0xac>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	3501      	adds	r5, #1
 80060da:	e7c6      	b.n	800606a <_printf_common+0x3e>
 80060dc:	18e1      	adds	r1, r4, r3
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	2030      	movs	r0, #48	; 0x30
 80060e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e6:	4422      	add	r2, r4
 80060e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f0:	3302      	adds	r3, #2
 80060f2:	e7c7      	b.n	8006084 <_printf_common+0x58>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4622      	mov	r2, r4
 80060f8:	4649      	mov	r1, r9
 80060fa:	4638      	mov	r0, r7
 80060fc:	47c0      	blx	r8
 80060fe:	3001      	adds	r0, #1
 8006100:	d0e6      	beq.n	80060d0 <_printf_common+0xa4>
 8006102:	3601      	adds	r6, #1
 8006104:	e7d9      	b.n	80060ba <_printf_common+0x8e>
	...

08006108 <_printf_i>:
 8006108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	7e0f      	ldrb	r7, [r1, #24]
 800610e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006110:	2f78      	cmp	r7, #120	; 0x78
 8006112:	4691      	mov	r9, r2
 8006114:	4680      	mov	r8, r0
 8006116:	460c      	mov	r4, r1
 8006118:	469a      	mov	sl, r3
 800611a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800611e:	d807      	bhi.n	8006130 <_printf_i+0x28>
 8006120:	2f62      	cmp	r7, #98	; 0x62
 8006122:	d80a      	bhi.n	800613a <_printf_i+0x32>
 8006124:	2f00      	cmp	r7, #0
 8006126:	f000 80d4 	beq.w	80062d2 <_printf_i+0x1ca>
 800612a:	2f58      	cmp	r7, #88	; 0x58
 800612c:	f000 80c0 	beq.w	80062b0 <_printf_i+0x1a8>
 8006130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006138:	e03a      	b.n	80061b0 <_printf_i+0xa8>
 800613a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613e:	2b15      	cmp	r3, #21
 8006140:	d8f6      	bhi.n	8006130 <_printf_i+0x28>
 8006142:	a101      	add	r1, pc, #4	; (adr r1, 8006148 <_printf_i+0x40>)
 8006144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006131 	.word	0x08006131
 8006154:	08006131 	.word	0x08006131
 8006158:	08006131 	.word	0x08006131
 800615c:	08006131 	.word	0x08006131
 8006160:	080061b5 	.word	0x080061b5
 8006164:	08006131 	.word	0x08006131
 8006168:	08006131 	.word	0x08006131
 800616c:	08006131 	.word	0x08006131
 8006170:	08006131 	.word	0x08006131
 8006174:	080062b9 	.word	0x080062b9
 8006178:	080061e1 	.word	0x080061e1
 800617c:	08006273 	.word	0x08006273
 8006180:	08006131 	.word	0x08006131
 8006184:	08006131 	.word	0x08006131
 8006188:	080062db 	.word	0x080062db
 800618c:	08006131 	.word	0x08006131
 8006190:	080061e1 	.word	0x080061e1
 8006194:	08006131 	.word	0x08006131
 8006198:	08006131 	.word	0x08006131
 800619c:	0800627b 	.word	0x0800627b
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	602a      	str	r2, [r5, #0]
 80061a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b0:	2301      	movs	r3, #1
 80061b2:	e09f      	b.n	80062f4 <_printf_i+0x1ec>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	0607      	lsls	r7, r0, #24
 80061ba:	f103 0104 	add.w	r1, r3, #4
 80061be:	6029      	str	r1, [r5, #0]
 80061c0:	d501      	bpl.n	80061c6 <_printf_i+0xbe>
 80061c2:	681e      	ldr	r6, [r3, #0]
 80061c4:	e003      	b.n	80061ce <_printf_i+0xc6>
 80061c6:	0646      	lsls	r6, r0, #25
 80061c8:	d5fb      	bpl.n	80061c2 <_printf_i+0xba>
 80061ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	da03      	bge.n	80061da <_printf_i+0xd2>
 80061d2:	232d      	movs	r3, #45	; 0x2d
 80061d4:	4276      	negs	r6, r6
 80061d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061da:	485a      	ldr	r0, [pc, #360]	; (8006344 <_printf_i+0x23c>)
 80061dc:	230a      	movs	r3, #10
 80061de:	e012      	b.n	8006206 <_printf_i+0xfe>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	1d19      	adds	r1, r3, #4
 80061e6:	6029      	str	r1, [r5, #0]
 80061e8:	0605      	lsls	r5, r0, #24
 80061ea:	d501      	bpl.n	80061f0 <_printf_i+0xe8>
 80061ec:	681e      	ldr	r6, [r3, #0]
 80061ee:	e002      	b.n	80061f6 <_printf_i+0xee>
 80061f0:	0641      	lsls	r1, r0, #25
 80061f2:	d5fb      	bpl.n	80061ec <_printf_i+0xe4>
 80061f4:	881e      	ldrh	r6, [r3, #0]
 80061f6:	4853      	ldr	r0, [pc, #332]	; (8006344 <_printf_i+0x23c>)
 80061f8:	2f6f      	cmp	r7, #111	; 0x6f
 80061fa:	bf0c      	ite	eq
 80061fc:	2308      	moveq	r3, #8
 80061fe:	230a      	movne	r3, #10
 8006200:	2100      	movs	r1, #0
 8006202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006206:	6865      	ldr	r5, [r4, #4]
 8006208:	60a5      	str	r5, [r4, #8]
 800620a:	2d00      	cmp	r5, #0
 800620c:	bfa2      	ittt	ge
 800620e:	6821      	ldrge	r1, [r4, #0]
 8006210:	f021 0104 	bicge.w	r1, r1, #4
 8006214:	6021      	strge	r1, [r4, #0]
 8006216:	b90e      	cbnz	r6, 800621c <_printf_i+0x114>
 8006218:	2d00      	cmp	r5, #0
 800621a:	d04b      	beq.n	80062b4 <_printf_i+0x1ac>
 800621c:	4615      	mov	r5, r2
 800621e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006222:	fb03 6711 	mls	r7, r3, r1, r6
 8006226:	5dc7      	ldrb	r7, [r0, r7]
 8006228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800622c:	4637      	mov	r7, r6
 800622e:	42bb      	cmp	r3, r7
 8006230:	460e      	mov	r6, r1
 8006232:	d9f4      	bls.n	800621e <_printf_i+0x116>
 8006234:	2b08      	cmp	r3, #8
 8006236:	d10b      	bne.n	8006250 <_printf_i+0x148>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	07de      	lsls	r6, r3, #31
 800623c:	d508      	bpl.n	8006250 <_printf_i+0x148>
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	6861      	ldr	r1, [r4, #4]
 8006242:	4299      	cmp	r1, r3
 8006244:	bfde      	ittt	le
 8006246:	2330      	movle	r3, #48	; 0x30
 8006248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800624c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006250:	1b52      	subs	r2, r2, r5
 8006252:	6122      	str	r2, [r4, #16]
 8006254:	f8cd a000 	str.w	sl, [sp]
 8006258:	464b      	mov	r3, r9
 800625a:	aa03      	add	r2, sp, #12
 800625c:	4621      	mov	r1, r4
 800625e:	4640      	mov	r0, r8
 8006260:	f7ff fee4 	bl	800602c <_printf_common>
 8006264:	3001      	adds	r0, #1
 8006266:	d14a      	bne.n	80062fe <_printf_i+0x1f6>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800626c:	b004      	add	sp, #16
 800626e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f043 0320 	orr.w	r3, r3, #32
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	4833      	ldr	r0, [pc, #204]	; (8006348 <_printf_i+0x240>)
 800627c:	2778      	movs	r7, #120	; 0x78
 800627e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	6829      	ldr	r1, [r5, #0]
 8006286:	061f      	lsls	r7, r3, #24
 8006288:	f851 6b04 	ldr.w	r6, [r1], #4
 800628c:	d402      	bmi.n	8006294 <_printf_i+0x18c>
 800628e:	065f      	lsls	r7, r3, #25
 8006290:	bf48      	it	mi
 8006292:	b2b6      	uxthmi	r6, r6
 8006294:	07df      	lsls	r7, r3, #31
 8006296:	bf48      	it	mi
 8006298:	f043 0320 	orrmi.w	r3, r3, #32
 800629c:	6029      	str	r1, [r5, #0]
 800629e:	bf48      	it	mi
 80062a0:	6023      	strmi	r3, [r4, #0]
 80062a2:	b91e      	cbnz	r6, 80062ac <_printf_i+0x1a4>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	f023 0320 	bic.w	r3, r3, #32
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	2310      	movs	r3, #16
 80062ae:	e7a7      	b.n	8006200 <_printf_i+0xf8>
 80062b0:	4824      	ldr	r0, [pc, #144]	; (8006344 <_printf_i+0x23c>)
 80062b2:	e7e4      	b.n	800627e <_printf_i+0x176>
 80062b4:	4615      	mov	r5, r2
 80062b6:	e7bd      	b.n	8006234 <_printf_i+0x12c>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	6826      	ldr	r6, [r4, #0]
 80062bc:	6961      	ldr	r1, [r4, #20]
 80062be:	1d18      	adds	r0, r3, #4
 80062c0:	6028      	str	r0, [r5, #0]
 80062c2:	0635      	lsls	r5, r6, #24
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	d501      	bpl.n	80062cc <_printf_i+0x1c4>
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <_printf_i+0x1ca>
 80062cc:	0670      	lsls	r0, r6, #25
 80062ce:	d5fb      	bpl.n	80062c8 <_printf_i+0x1c0>
 80062d0:	8019      	strh	r1, [r3, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	4615      	mov	r5, r2
 80062d8:	e7bc      	b.n	8006254 <_printf_i+0x14c>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	2100      	movs	r1, #0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7f9 ff72 	bl	80001d0 <memchr>
 80062ec:	b108      	cbz	r0, 80062f2 <_printf_i+0x1ea>
 80062ee:	1b40      	subs	r0, r0, r5
 80062f0:	6060      	str	r0, [r4, #4]
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	2300      	movs	r3, #0
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fc:	e7aa      	b.n	8006254 <_printf_i+0x14c>
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	462a      	mov	r2, r5
 8006302:	4649      	mov	r1, r9
 8006304:	4640      	mov	r0, r8
 8006306:	47d0      	blx	sl
 8006308:	3001      	adds	r0, #1
 800630a:	d0ad      	beq.n	8006268 <_printf_i+0x160>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	079b      	lsls	r3, r3, #30
 8006310:	d413      	bmi.n	800633a <_printf_i+0x232>
 8006312:	68e0      	ldr	r0, [r4, #12]
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	4298      	cmp	r0, r3
 8006318:	bfb8      	it	lt
 800631a:	4618      	movlt	r0, r3
 800631c:	e7a6      	b.n	800626c <_printf_i+0x164>
 800631e:	2301      	movs	r3, #1
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d09d      	beq.n	8006268 <_printf_i+0x160>
 800632c:	3501      	adds	r5, #1
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	9903      	ldr	r1, [sp, #12]
 8006332:	1a5b      	subs	r3, r3, r1
 8006334:	42ab      	cmp	r3, r5
 8006336:	dcf2      	bgt.n	800631e <_printf_i+0x216>
 8006338:	e7eb      	b.n	8006312 <_printf_i+0x20a>
 800633a:	2500      	movs	r5, #0
 800633c:	f104 0619 	add.w	r6, r4, #25
 8006340:	e7f5      	b.n	800632e <_printf_i+0x226>
 8006342:	bf00      	nop
 8006344:	08006589 	.word	0x08006589
 8006348:	0800659a 	.word	0x0800659a

0800634c <__malloc_lock>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__malloc_lock+0x8>)
 800634e:	f7ff bc65 	b.w	8005c1c <__retarget_lock_acquire_recursive>
 8006352:	bf00      	nop
 8006354:	20000648 	.word	0x20000648

08006358 <__malloc_unlock>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__malloc_unlock+0x8>)
 800635a:	f7ff bc60 	b.w	8005c1e <__retarget_lock_release_recursive>
 800635e:	bf00      	nop
 8006360:	20000648 	.word	0x20000648

08006364 <_realloc_r>:
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4680      	mov	r8, r0
 800636a:	4614      	mov	r4, r2
 800636c:	460e      	mov	r6, r1
 800636e:	b921      	cbnz	r1, 800637a <_realloc_r+0x16>
 8006370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006374:	4611      	mov	r1, r2
 8006376:	f7ff bdd9 	b.w	8005f2c <_malloc_r>
 800637a:	b92a      	cbnz	r2, 8006388 <_realloc_r+0x24>
 800637c:	f000 f84c 	bl	8006418 <_free_r>
 8006380:	4625      	mov	r5, r4
 8006382:	4628      	mov	r0, r5
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006388:	f000 f892 	bl	80064b0 <_malloc_usable_size_r>
 800638c:	4284      	cmp	r4, r0
 800638e:	4607      	mov	r7, r0
 8006390:	d802      	bhi.n	8006398 <_realloc_r+0x34>
 8006392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006396:	d812      	bhi.n	80063be <_realloc_r+0x5a>
 8006398:	4621      	mov	r1, r4
 800639a:	4640      	mov	r0, r8
 800639c:	f7ff fdc6 	bl	8005f2c <_malloc_r>
 80063a0:	4605      	mov	r5, r0
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d0ed      	beq.n	8006382 <_realloc_r+0x1e>
 80063a6:	42bc      	cmp	r4, r7
 80063a8:	4622      	mov	r2, r4
 80063aa:	4631      	mov	r1, r6
 80063ac:	bf28      	it	cs
 80063ae:	463a      	movcs	r2, r7
 80063b0:	f7ff fc36 	bl	8005c20 <memcpy>
 80063b4:	4631      	mov	r1, r6
 80063b6:	4640      	mov	r0, r8
 80063b8:	f000 f82e 	bl	8006418 <_free_r>
 80063bc:	e7e1      	b.n	8006382 <_realloc_r+0x1e>
 80063be:	4635      	mov	r5, r6
 80063c0:	e7df      	b.n	8006382 <_realloc_r+0x1e>

080063c2 <memmove>:
 80063c2:	4288      	cmp	r0, r1
 80063c4:	b510      	push	{r4, lr}
 80063c6:	eb01 0402 	add.w	r4, r1, r2
 80063ca:	d902      	bls.n	80063d2 <memmove+0x10>
 80063cc:	4284      	cmp	r4, r0
 80063ce:	4623      	mov	r3, r4
 80063d0:	d807      	bhi.n	80063e2 <memmove+0x20>
 80063d2:	1e43      	subs	r3, r0, #1
 80063d4:	42a1      	cmp	r1, r4
 80063d6:	d008      	beq.n	80063ea <memmove+0x28>
 80063d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063e0:	e7f8      	b.n	80063d4 <memmove+0x12>
 80063e2:	4402      	add	r2, r0
 80063e4:	4601      	mov	r1, r0
 80063e6:	428a      	cmp	r2, r1
 80063e8:	d100      	bne.n	80063ec <memmove+0x2a>
 80063ea:	bd10      	pop	{r4, pc}
 80063ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063f4:	e7f7      	b.n	80063e6 <memmove+0x24>
	...

080063f8 <_sbrk_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d06      	ldr	r5, [pc, #24]	; (8006414 <_sbrk_r+0x1c>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f7fa ff42 	bl	800128c <_sbrk>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_sbrk_r+0x1a>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_sbrk_r+0x1a>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	20000654 	.word	0x20000654

08006418 <_free_r>:
 8006418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800641a:	2900      	cmp	r1, #0
 800641c:	d044      	beq.n	80064a8 <_free_r+0x90>
 800641e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006422:	9001      	str	r0, [sp, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f1a1 0404 	sub.w	r4, r1, #4
 800642a:	bfb8      	it	lt
 800642c:	18e4      	addlt	r4, r4, r3
 800642e:	f7ff ff8d 	bl	800634c <__malloc_lock>
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <_free_r+0x94>)
 8006434:	9801      	ldr	r0, [sp, #4]
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	b933      	cbnz	r3, 8006448 <_free_r+0x30>
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	6014      	str	r4, [r2, #0]
 800643e:	b003      	add	sp, #12
 8006440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006444:	f7ff bf88 	b.w	8006358 <__malloc_unlock>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d908      	bls.n	800645e <_free_r+0x46>
 800644c:	6825      	ldr	r5, [r4, #0]
 800644e:	1961      	adds	r1, r4, r5
 8006450:	428b      	cmp	r3, r1
 8006452:	bf01      	itttt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	1949      	addeq	r1, r1, r5
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	e7ed      	b.n	800643a <_free_r+0x22>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x50>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x46>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1855      	adds	r5, r2, r1
 800646c:	42a5      	cmp	r5, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x70>
 8006470:	6824      	ldr	r4, [r4, #0]
 8006472:	4421      	add	r1, r4
 8006474:	1854      	adds	r4, r2, r1
 8006476:	42a3      	cmp	r3, r4
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1e0      	bne.n	800643e <_free_r+0x26>
 800647c:	681c      	ldr	r4, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	440c      	add	r4, r1
 8006484:	6014      	str	r4, [r2, #0]
 8006486:	e7da      	b.n	800643e <_free_r+0x26>
 8006488:	d902      	bls.n	8006490 <_free_r+0x78>
 800648a:	230c      	movs	r3, #12
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	e7d6      	b.n	800643e <_free_r+0x26>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	1961      	adds	r1, r4, r5
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1949      	addeq	r1, r1, r5
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7ca      	b.n	800643e <_free_r+0x26>
 80064a8:	b003      	add	sp, #12
 80064aa:	bd30      	pop	{r4, r5, pc}
 80064ac:	2000064c 	.word	0x2000064c

080064b0 <_malloc_usable_size_r>:
 80064b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b4:	1f18      	subs	r0, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bfbc      	itt	lt
 80064ba:	580b      	ldrlt	r3, [r1, r0]
 80064bc:	18c0      	addlt	r0, r0, r3
 80064be:	4770      	bx	lr

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
